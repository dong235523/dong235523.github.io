<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IDEA2021 报Error running ‘Application‘: Command line is too long解决方案</title>
    <url>/2023/11/28/IDEA2021-%E6%8A%A5Error-running-%E2%80%98Application%E2%80%98-Command-line-is-too-long%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>IDEA在启动项目时，突然报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error running &#x27;Application&#x27;:</span><br><span class="line">Command line is too long.Shorten command line for Application or also for Spring Boot default configuration.</span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="springboot项目"><a href="#springboot项目" class="headerlink" title="springboot项目"></a>springboot项目</h3><p>当前项目点击运行下拉框的Edit Configurations</p>
<img src="/2023/11/28/IDEA2021-%E6%8A%A5Error-running-%E2%80%98Application%E2%80%98-Command-line-is-too-long%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/1.png" class="">
<p>在Application界面选择Shorten command line下拉框，选择classpath file或者JAR manifest，点击OK确认</p>
<img src="/2023/11/28/IDEA2021-%E6%8A%A5Error-running-%E2%80%98Application%E2%80%98-Command-line-is-too-long%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2.jpg" class="">

<h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p>当前项目点击运行下拉框的Edit Configurations</p>
<img src="/2023/11/28/IDEA2021-%E6%8A%A5Error-running-%E2%80%98Application%E2%80%98-Command-line-is-too-long%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/3.jpg" class="">
<p>在主函数页面下点击Modify optins</p>
<img src="/2023/11/28/IDEA2021-%E6%8A%A5Error-running-%E2%80%98Application%E2%80%98-Command-line-is-too-long%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/4.jpg" class="">
<p>在弹出页面点击Shorten command line</p>
<img src="/2023/11/28/IDEA2021-%E6%8A%A5Error-running-%E2%80%98Application%E2%80%98-Command-line-is-too-long%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/5.jpg" class="">
<p>页面上会多出Shorten command line选项</p>
<img src="/2023/11/28/IDEA2021-%E6%8A%A5Error-running-%E2%80%98Application%E2%80%98-Command-line-is-too-long%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/6.jpg" class="">
<p>选择classpath file或者JAR manifest，点击OK确认</p>
]]></content>
      <categories>
        <category>开发工具配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>IE浏览器html的兼容性设置</title>
    <url>/2019/01/21/IE%E6%B5%8F%E8%A7%88%E5%99%A8html%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>如此设置为兼容到最高。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>以下设置可以特定设置到某个版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=9,8,7&quot; /&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA实现坐标区域碰撞</title>
    <url>/2023/04/20/JAVA%E5%AE%9E%E7%8E%B0%E5%9D%90%E6%A0%87%E5%8C%BA%E5%9F%9F%E7%A2%B0%E6%92%9E/</url>
    <content><![CDATA[<p>判断坐标是否在坐标串所画的区域内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">	String zbc= &quot;123.442907,41.820635,123.442889,41.818592,&quot;</span><br><span class="line">			+ &quot;123.442853,41.816777,123.446428,41.816831,123.449339,41.816845,123.451459,41.816912,&quot;</span><br><span class="line">			+ &quot;123.451333,41.819116,123.451315,41.820836,123.448836,41.820917,&quot;</span><br><span class="line">			+ &quot;123.448979,41.818189,123.444847,41.81835,123.444757,41.820836&quot;;</span><br><span class="line">	String zbx = &quot;123.443893&quot;;</span><br><span class="line">	String zby = &quot;41.820155&quot;;</span><br><span class="line">	List&lt;XlAppGeoPoint&gt; ps = new ArrayList&lt;XlAppGeoPoint&gt;();</span><br><span class="line">	ps = getGeoList(zbc).get(0);</span><br><span class="line">	boolean isIn = isPointInPoly(Double.parseDouble(zbx),Double.parseDouble(zby),ps);</span><br><span class="line">	System.out.println(isIn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static List&lt;List&lt;XlAppGeoPoint&gt;&gt; getGeoList(String bjzbz) &#123;</span><br><span class="line">	List&lt;List&lt;XlAppGeoPoint&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">	try &#123;</span><br><span class="line">		String[] geoArray = bjzbz.split(&quot;;&quot;);</span><br><span class="line">		if (geoArray != null) &#123;</span><br><span class="line">			for (String geoString : geoArray) &#123;</span><br><span class="line">				List&lt;XlAppGeoPoint&gt; geoPointList = new ArrayList&lt;&gt;();</span><br><span class="line">				String[] zbxy = geoString.split(&quot;,&quot;);</span><br><span class="line">				if (zbxy != null &amp;&amp; zbxy.length &gt;= 2) &#123;</span><br><span class="line">					for (int i = 0; i &lt; zbxy.length - 1; i = i + 2) &#123;</span><br><span class="line">						geoPointList.add(new XlAppGeoPoint(Double</span><br><span class="line">								.parseDouble(zbxy[i]), Double</span><br><span class="line">								.parseDouble(zbxy[i + 1])));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				list.add(geoPointList);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static boolean isPointInPoly(double ALon, double Alat,List&lt;XlAppGeoPoint&gt; ps) &#123;</span><br><span class="line">	int iSum, iCount, iIndex;</span><br><span class="line">	double dLon1 = 0, dLon2 = 0, dLat1 = 0, dLat2 = 0, dLon;</span><br><span class="line"></span><br><span class="line">	iSum = 0;</span><br><span class="line">	iCount = ps.size();</span><br><span class="line"></span><br><span class="line">	for (iIndex = 0; iIndex &lt; iCount; iIndex++) &#123;</span><br><span class="line">		if (iIndex == iCount - 1) &#123;</span><br><span class="line">			dLon1 = ps.get(iIndex).getZbx();</span><br><span class="line">			dLat1 = ps.get(iIndex).getZby();</span><br><span class="line">			dLon2 = ps.get(0).getZbx();</span><br><span class="line">			dLat2 = ps.get(0).getZby();</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			dLon1 = ps.get(iIndex).getZbx();</span><br><span class="line">			dLat1 = ps.get(iIndex).getZby();</span><br><span class="line">			dLon2 = ps.get(iIndex + 1).getZbx();</span><br><span class="line">			dLat2 = ps.get(iIndex + 1).getZby();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		// 以下语句判断A点是否在边的两端点的水平平行线之间，在则可能有交点，开始判断交点是否在左射线上</span><br><span class="line">		if (((Alat &gt;= dLat1) &amp;&amp; (Alat &lt; dLat2))</span><br><span class="line">				|| ((Alat &gt;= dLat2) &amp;&amp; (Alat &lt; dLat1))) &#123;</span><br><span class="line">			if (Math.abs(dLat1 - dLat2) &gt; 0) &#123;</span><br><span class="line">				// 得到A点向左射线与边的交点的x坐标</span><br><span class="line">				dLon = dLon1 - ((dLon1 - dLon2) * (dLat1 - Alat))</span><br><span class="line">						/ (dLat1 - dLat2);</span><br><span class="line">				// 如果交点在A点左侧（说明是做射线与边的交点），则射线与边的全部交点数加一</span><br><span class="line">				if (dLon &lt; ALon) &#123;</span><br><span class="line">					iSum++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if ((iSum % 2) != 0) &#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class XlAppGeoPoint &#123;</span><br><span class="line">	private double zbx;</span><br><span class="line">	private double zby;</span><br><span class="line"></span><br><span class="line">	public XlAppGeoPoint(double zbx, double zby) &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.zbx = zbx;</span><br><span class="line">		this.zby = zby;</span><br><span class="line">	&#125;</span><br><span class="line">	public double getZbx() &#123;</span><br><span class="line">		return zbx;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setZbx(double zbx) &#123;</span><br><span class="line">		this.zbx = zbx;</span><br><span class="line">	&#125;</span><br><span class="line">	public double getZby() &#123;</span><br><span class="line">		return zby;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setZby(double zby) &#123;</span><br><span class="line">		this.zby = zby;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java配置环境变量</title>
    <url>/2023/02/17/Java%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<ul>
<li><h3 id="右键点击“此电脑”，选择“属性”项。"><a href="#右键点击“此电脑”，选择“属性”项。" class="headerlink" title="右键点击“此电脑”，选择“属性”项。"></a>右键点击“此电脑”，选择“属性”项。</h3><img src="/2023/02/17/Java%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/1.png" class=""></li>
<li><h3 id="点击“高级系统设置”，在弹出的系统属性框中，选择“高级”选项卡（默认即显示该选项卡），点击“环境变量”。"><a href="#点击“高级系统设置”，在弹出的系统属性框中，选择“高级”选项卡（默认即显示该选项卡），点击“环境变量”。" class="headerlink" title="点击“高级系统设置”，在弹出的系统属性框中，选择“高级”选项卡（默认即显示该选项卡），点击“环境变量”。"></a>点击“高级系统设置”，在弹出的系统属性框中，选择“高级”选项卡（默认即显示该选项卡），点击“环境变量”。</h3><img src="/2023/02/17/Java%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/2.png" class=""></li>
<li><h3 id="在弹出的“环境变量”框，中选择下方的系统变量，点击新建。"><a href="#在弹出的“环境变量”框，中选择下方的系统变量，点击新建。" class="headerlink" title="在弹出的“环境变量”框，中选择下方的系统变量，点击新建。"></a>在弹出的“环境变量”框，中选择下方的系统变量，点击新建。</h3><img src="/2023/02/17/Java%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/3.png" class=""></li>
<li><h3 id="在弹出的“新建系统变量”框中，输入变量名和变量值，点击确定。"><a href="#在弹出的“新建系统变量”框中，输入变量名和变量值，点击确定。" class="headerlink" title="在弹出的“新建系统变量”框中，输入变量名和变量值，点击确定。"></a>在弹出的“新建系统变量”框中，输入变量名和变量值，点击确定。</h3>  变量名为：JAVA_HOME<br>  变量值为JDK的安装路径，到bin目录的上一层即可。比如E:\develop\Java\jdk-11<br>  注意：为防止路径输入错误，可以打开文件夹，拷贝路径。<img src="/2023/02/17/Java%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/4.png" class=""></li>
<li><h3 id="点击确定后，系统变量中会出现一条新的记录。"><a href="#点击确定后，系统变量中会出现一条新的记录。" class="headerlink" title="点击确定后，系统变量中会出现一条新的记录。"></a>点击确定后，系统变量中会出现一条新的记录。</h3><img src="/2023/02/17/Java%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/5.png" class=""></li>
<li><h3 id="然后选中“系统变量”中的“Path”变量，点击“编辑”按钮，将刚才创建的JAVA-HOME变量添加到“Path”变量中。"><a href="#然后选中“系统变量”中的“Path”变量，点击“编辑”按钮，将刚才创建的JAVA-HOME变量添加到“Path”变量中。" class="headerlink" title="然后选中“系统变量”中的“Path”变量，点击“编辑”按钮，将刚才创建的JAVA_HOME变量添加到“Path”变量中。"></a>然后选中“系统变量”中的“Path”变量，点击“编辑”按钮，将刚才创建的JAVA_HOME变量添加到“Path”变量中。</h3></li>
<li><h3 id="在弹出的“编辑系统变量”框中，点击“新建”，输入-JAVA-HOME-bin。"><a href="#在弹出的“编辑系统变量”框中，点击“新建”，输入-JAVA-HOME-bin。" class="headerlink" title="在弹出的“编辑系统变量”框中，点击“新建”，输入%JAVA_HOME%\bin。"></a>在弹出的“编辑系统变量”框中，点击“新建”，输入%JAVA_HOME%\bin。</h3><img src="/2023/02/17/Java%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/7.png" class=""></li>
<li><h3 id="在弹出的“编辑系统变量”框中，点击“新建”，输入-JAVA-HOME-bin。-1"><a href="#在弹出的“编辑系统变量”框中，点击“新建”，输入-JAVA-HOME-bin。-1" class="headerlink" title="在弹出的“编辑系统变量”框中，点击“新建”，输入%JAVA_HOME%\bin。"></a>在弹出的“编辑系统变量”框中，点击“新建”，输入%JAVA_HOME%\bin。</h3><img src="/2023/02/17/Java%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/8.png" class=""></li>
<li><h3 id="输入完毕，点击“上移”按钮，将该值移动到第一行。点击确定。"><a href="#输入完毕，点击“上移”按钮，将该值移动到第一行。点击确定。" class="headerlink" title="输入完毕，点击“上移”按钮，将该值移动到第一行。点击确定。"></a>输入完毕，点击“上移”按钮，将该值移动到第一行。点击确定。</h3><img src="/2023/02/17/Java%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/9.png" class=""></li>
<li><h3 id="至此，java环境变量配置完毕，打开命令行窗口，验证配置是否成功。"><a href="#至此，java环境变量配置完毕，打开命令行窗口，验证配置是否成功。" class="headerlink" title="至此，java环境变量配置完毕，打开命令行窗口，验证配置是否成功。"></a>至此，java环境变量配置完毕，打开命令行窗口，验证配置是否成功。</h3>  如果之前已经打开命令行窗口，需要关闭重新启动才可。在cmd命令窗口，输入java -version，查看效果<img src="/2023/02/17/Java%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/10.jpg" class=""></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL8版本以上安装教程</title>
    <url>/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<ul>
<li><h2 id="环境预备："><a href="#环境预备：" class="headerlink" title="环境预备："></a>环境预备：</h2><ul>
<li><h3 id="win10-64位系统"><a href="#win10-64位系统" class="headerlink" title="win10 64位系统"></a>win10 64位系统</h3></li>
<li><h3 id="你的电脑需要拥有Microsoft-Visual-C-2015-2019-如下图："><a href="#你的电脑需要拥有Microsoft-Visual-C-2015-2019-如下图：" class="headerlink" title="你的电脑需要拥有Microsoft Visual C++ 2015-2019 ,如下图："></a>你的电脑需要拥有Microsoft Visual C++ 2015-2019 ,如下图：</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1.jpg" class=""></li>
<li><h3 id="如何查看自己有没有？首先按win-R，输入control-然后回车，点击卸载程序即可看见自己的应用程序"><a href="#如何查看自己有没有？首先按win-R，输入control-然后回车，点击卸载程序即可看见自己的应用程序" class="headerlink" title="如何查看自己有没有？首先按win+R，输入control 然后回车，点击卸载程序即可看见自己的应用程序"></a>如何查看自己有没有？首先按win+R，输入control 然后回车，点击卸载程序即可看见自己的应用程序</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/2.jpg" class=""></li>
</ul>
</li>
<li><h2 id="可视化安装"><a href="#可视化安装" class="headerlink" title="可视化安装"></a>可视化安装</h2><ul>
<li><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3></li>
<li><h3 id="我们这里从官网下载，如下图："><a href="#我们这里从官网下载，如下图：" class="headerlink" title="我们这里从官网下载，如下图："></a>我们这里从官网下载，如下图：</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/3.jpg" class=""></li>
<li><h3 id="然后往下滑，找到MySQL-Community-GPL-Downloads-如图所示，点击"><a href="#然后往下滑，找到MySQL-Community-GPL-Downloads-如图所示，点击" class="headerlink" title="然后往下滑，找到MySQL Community (GPL) Downloads 如图所示，点击"></a>然后往下滑，找到MySQL Community (GPL) Downloads 如图所示，点击</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/4.jpg" class=""></li>
<li><h3 id="找到MySQL-Installer-for-Windows，点击"><a href="#找到MySQL-Installer-for-Windows，点击" class="headerlink" title="找到MySQL Installer for Windows，点击"></a>找到MySQL Installer for Windows，点击</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/5.jpg" class=""></li>
<li><h3 id="①我们先选择我们的系统，这里默认为Microsoft-Windows，如果你的需求刚好为Windows，那么保持默认就好，如果不是，请到复选框选择你对应的系统。②点击下载"><a href="#①我们先选择我们的系统，这里默认为Microsoft-Windows，如果你的需求刚好为Windows，那么保持默认就好，如果不是，请到复选框选择你对应的系统。②点击下载" class="headerlink" title="①我们先选择我们的系统，这里默认为Microsoft Windows，如果你的需求刚好为Windows，那么保持默认就好，如果不是，请到复选框选择你对应的系统。②点击下载"></a>①我们先选择我们的系统，这里默认为Microsoft Windows，如果你的需求刚好为Windows，那么保持默认就好，如果不是，请到复选框选择你对应的系统。②点击下载</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/6.jpg" class="">
  如果你想安装以前的版本，点击Archives，如下图：  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/7.jpg" class="">
   ①选择你要下载的MySQL版本 ②选择你的系统 ③点击下载  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/8.jpg" class=""></li>
<li><h3 id="点击-No-thanks-just-start-my-download"><a href="#点击-No-thanks-just-start-my-download" class="headerlink" title="点击 No thanks, just start my download."></a>点击 No thanks, just start my download.</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/9.jpg" class=""></li>
<li><h3 id="这样就下载到本地了"><a href="#这样就下载到本地了" class="headerlink" title="这样就下载到本地了"></a>这样就下载到本地了</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/10.jpg" class=""></li>
<li><h3 id="双击安装，然后选择Custom，点击Next"><a href="#双击安装，然后选择Custom，点击Next" class="headerlink" title="双击安装，然后选择Custom，点击Next"></a>双击安装，然后选择Custom，点击Next</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/11.jpg" class=""></li>
<li><h3 id="①点击MySQL-Servers，依次展开-②点击MySQL-Server-8-0-27-x64，并且点击向右箭头-③点击MySQL-Server-8-0-27-x64"><a href="#①点击MySQL-Servers，依次展开-②点击MySQL-Server-8-0-27-x64，并且点击向右箭头-③点击MySQL-Server-8-0-27-x64" class="headerlink" title="①点击MySQL Servers，依次展开 ②点击MySQL Server 8.0.27-x64，并且点击向右箭头 ③点击MySQL Server 8.0.27-x64"></a>①点击MySQL Servers，依次展开 ②点击MySQL Server 8.0.27-x64，并且点击向右箭头 ③点击MySQL Server 8.0.27-x64</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/12.jpg" class="">
  如果你不想安装到别的路径，那么默认安装到C:\Program Files\MySQL\MySQL Server 8.0，数据目录到<br>  C:\ProgramData\MySQL\MySQL Server 8.0，如下图所示：  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/13.jpg" class="">
  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/14.jpg" class="">
  如果你想要安装到C盘以外的盘（这里推荐安装到C盘以外的盘），①先在你的D或者E或者其他盘建立MySQL文件夹，这里我现在盘 ②在E盘下创建MySQL8.0.27的文件夹如下图所示：  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/15.jpg" class="">
  然后在MySQL8.0.27的文件夹再建立MySQL的一个数据目录data，如下图：  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/16.jpg" class="">
  ①点击，选择我们刚刚在E盘创建的MySQL8.0.27文件夹（注意：这里要换成你创建MySQL8.0.27文件夹） ② 选择我们刚刚在E盘创建的MySQL8.0.27文件夹下的data文件夹，点击ok，然后再点ok 如下图：  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/17.jpg" class="">
  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/18.jpg" class="">
  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/19.jpg" class=""></li>
<li><h3 id="如果你要使用MySQL连接可视化软件：如Navicat，Excel，PowerBI，Tableau等，我们就需要安装Connector-x2F-ODBC-8-0-27-X64和Connector-x2F-NET-8-0-27-X86（这里推荐安装）-如果不指定安装路径，则默认到C-Program-Files-MySQL-Connector-ODBC-8-0，C-Program-Files-x86-MySQL-Connector-NET-8-0。"><a href="#如果你要使用MySQL连接可视化软件：如Navicat，Excel，PowerBI，Tableau等，我们就需要安装Connector-x2F-ODBC-8-0-27-X64和Connector-x2F-NET-8-0-27-X86（这里推荐安装）-如果不指定安装路径，则默认到C-Program-Files-MySQL-Connector-ODBC-8-0，C-Program-Files-x86-MySQL-Connector-NET-8-0。" class="headerlink" title="如果你要使用MySQL连接可视化软件：如Navicat，Excel，PowerBI，Tableau等，我们就需要安装Connector&#x2F;ODBC 8.0.27 - X64和Connector&#x2F;NET 8.0.27 - X86（这里推荐安装） 如果不指定安装路径，则默认到C:\Program Files\MySQL\Connector ODBC 8.0，C:\Program Files (x86)\MySQL\Connector NET 8.0。"></a>如果你要使用MySQL连接可视化软件：如Navicat，Excel，PowerBI，Tableau等，我们就需要安装Connector&#x2F;ODBC 8.0.27 - X64和Connector&#x2F;NET 8.0.27 - X86（这里推荐安装） 如果不指定安装路径，则默认到C:\Program Files\MySQL\Connector ODBC 8.0，C:\Program Files (x86)\MySQL\Connector NET 8.0。</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/20.jpg" class="">
  如果需要自定义安装目录，首先在E盘下创建MySQL_Connector_ODBC8.0 和MySQL_Connector_Net8.0 文件夹如下图所示：  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/21.jpg" class="">
  然后分别点击Advanced Options，选择对应的安装目录之后，点击ok 如下图：  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/22.jpg" class="">
  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/23.jpg" class=""></li>
<li><h3 id="当①的步骤都完成之后，在②的位置点击Next"><a href="#当①的步骤都完成之后，在②的位置点击Next" class="headerlink" title="当①的步骤都完成之后，在②的位置点击Next"></a>当①的步骤都完成之后，在②的位置点击Next</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/24.jpg" class=""></li>
<li><h3 id="点击Next，点击yes"><a href="#点击Next，点击yes" class="headerlink" title="点击Next，点击yes"></a>点击Next，点击yes</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/25.jpg" class=""></li>
<li><h3 id="点击Execute。等待①为全部完成，然后点击②的Next"><a href="#点击Execute。等待①为全部完成，然后点击②的Next" class="headerlink" title="点击Execute。等待①为全部完成，然后点击②的Next"></a>点击Execute。等待①为全部完成，然后点击②的Next</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/26.jpg" class="">
  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/27.jpg" class=""></li>
<li><h3 id="点击Next"><a href="#点击Next" class="headerlink" title="点击Next"></a>点击Next</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/28.jpg" class=""></li>
<li><h3 id="点击Next-1"><a href="#点击Next-1" class="headerlink" title="点击Next"></a>点击Next</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/29.jpg" class=""></li>
<li><h3 id="选择Use-Strong-Password-Encryption-for-Authentication-（RECOMMENDED）推荐选择这个。然后点击Next"><a href="#选择Use-Strong-Password-Encryption-for-Authentication-（RECOMMENDED）推荐选择这个。然后点击Next" class="headerlink" title="选择Use Strong Password Encryption for Authentication （RECOMMENDED）推荐选择这个。然后点击Next"></a>选择Use Strong Password Encryption for Authentication （RECOMMENDED）推荐选择这个。然后点击Next</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/30.jpg" class=""></li>
<li><h3 id="①输入进入数据库的密码，-②再次输入①所输入的密码，③默认为root用户，如果你要添加用户，点击即可，我这里直接默认为root用户，-④点击Next"><a href="#①输入进入数据库的密码，-②再次输入①所输入的密码，③默认为root用户，如果你要添加用户，点击即可，我这里直接默认为root用户，-④点击Next" class="headerlink" title="①输入进入数据库的密码， ②再次输入①所输入的密码，③默认为root用户，如果你要添加用户，点击即可，我这里直接默认为root用户， ④点击Next"></a>①输入进入数据库的密码， ②再次输入①所输入的密码，③默认为root用户，如果你要添加用户，点击即可，我这里直接默认为root用户， ④点击Next</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/31.jpg" class="">
  如果你要添加用户，按照如下图所示操作即可  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/32.jpg" class=""></li>
<li><h3 id="点击Next-2"><a href="#点击Next-2" class="headerlink" title="点击Next"></a>点击Next</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/33.jpg" class=""></li>
<li><h3 id="点击Execute"><a href="#点击Execute" class="headerlink" title="点击Execute"></a>点击Execute</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/34.jpg" class=""></li>
<li><h3 id="点击-Finish"><a href="#点击-Finish" class="headerlink" title="点击 Finish"></a>点击 Finish</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/35.jpg" class=""></li>
<li><h3 id="点击Next-3"><a href="#点击Next-3" class="headerlink" title="点击Next"></a>点击Next</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/36.jpg" class=""></li>
<li><h3 id="点击Finish"><a href="#点击Finish" class="headerlink" title="点击Finish"></a>点击Finish</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/37.jpg" class=""></li>
<li><h3 id="按win-R，输入cmd，然后再输入mysql-u-root-p，出现如下界面，那是因为我们还没有配置环境变量。"><a href="#按win-R，输入cmd，然后再输入mysql-u-root-p，出现如下界面，那是因为我们还没有配置环境变量。" class="headerlink" title="按win+R，输入cmd，然后再输入mysql -u root -p，出现如下界面，那是因为我们还没有配置环境变量。"></a>按win+R，输入cmd，然后再输入mysql -u root -p，出现如下界面，那是因为我们还没有配置环境变量。</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/38.jpg" class=""></li>
<li><h3 id="找到我们的MySQL下的bin的路径，然后复制"><a href="#找到我们的MySQL下的bin的路径，然后复制" class="headerlink" title="找到我们的MySQL下的bin的路径，然后复制"></a>找到我们的MySQL下的bin的路径，然后复制</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/39.jpg" class=""></li>
<li><h3 id="右键我的电脑，点击属性。①-点击高级系统设置-，②-点击环境变量-，③-点击Path-，④-点击编辑"><a href="#右键我的电脑，点击属性。①-点击高级系统设置-，②-点击环境变量-，③-点击Path-，④-点击编辑" class="headerlink" title="右键我的电脑，点击属性。① 点击高级系统设置 ，② 点击环境变量 ，③ 点击Path ，④ 点击编辑"></a>右键我的电脑，点击属性。① 点击高级系统设置 ，② 点击环境变量 ，③ 点击Path ，④ 点击编辑</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/40.jpg" class="">
  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/41.jpg" class=""></li>
<li><h3 id="①点击新建-②-粘贴刚刚复制的路径-③-点击确定-。-然后一直确定"><a href="#①点击新建-②-粘贴刚刚复制的路径-③-点击确定-。-然后一直确定" class="headerlink" title="①点击新建 ② 粘贴刚刚复制的路径 ③ 点击确定 。 然后一直确定"></a>①点击新建 ② 粘贴刚刚复制的路径 ③ 点击确定 。 然后一直确定</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/42.jpg" class=""></li>
<li><h3 id="再安装第23步的操作，如下图，证明我们已经安装成功"><a href="#再安装第23步的操作，如下图，证明我们已经安装成功" class="headerlink" title="再安装第23步的操作，如下图，证明我们已经安装成功"></a>再安装第23步的操作，如下图，证明我们已经安装成功</h3>  <img src="/2023/02/17/MySQL8%E7%89%88%E6%9C%AC%E4%BB%A5%E4%B8%8A%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/43.jpg" class=""></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL树形结构，查询所有下级数据id</title>
    <url>/2023/12/06/MySQL%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%EF%BC%8C%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E4%B8%8B%E7%BA%A7%E6%95%B0%E6%8D%AEid/</url>
    <content><![CDATA[<p>树形结构常用于菜单或者组织机构，查询所有下级在做数据权限方面非常重要</p>
<p>下面以若依的菜单表为例子，写一个查询语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT menu_id FROM(</span><br><span class="line">	SELECT t1.menu_id,t1.parent_id,</span><br><span class="line">	IF</span><br><span class="line">		( find_in_set( parent_id, @pids ) &gt; 0, @pids := concat( @pids, &#x27;,&#x27;, menu_id ), 0 ) AS isbig </span><br><span class="line">	FROM</span><br><span class="line">		( SELECT menu_id, parent_id FROM sys_menu t ORDER BY menu_id, parent_id ) t1,</span><br><span class="line">		( SELECT @pids := 108 ) t2 </span><br><span class="line">		) t3 </span><br><span class="line">WHERE</span><br><span class="line">	isbig &gt; 0;</span><br></pre></td></tr></table></figure>

<p>语法解析：<br>menu_id：查询的子集ID<br>parent_id：查询的父级ID</p>
<span>
    @pids := 变量定义。<br/>
    concat()  拼接字符串
</span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find_in_set(parent_id , @pids)  parent_id  数据是否在@pids字符串中。</span><br><span class="line">　　select find_in_set(&#x27;2&#x27;,&#x27;1,2&#x27;);返回2</span><br><span class="line">　　select find_in_set(&#x27;6&#x27;,&#x27;1&#x27;);返回0</span><br><span class="line">　　左边的是否包含在右边。</span><br></pre></td></tr></table></figure>
<span>
    if（express1,express2,express3）条件语句，if语句类似三目运算符，当exprss1成立时，执行express2,否则执行express3;
    t1的为父子级排序，t2为父级ID条件查询，t3条件查询父级的是否存在子集。
</span>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ORACLE根据任意id查询所有父级数据及子级数据</title>
    <url>/2023/03/13/ORACLE%E6%A0%B9%E6%8D%AE%E4%BB%BB%E6%84%8Fid%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%88%B6%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%8F%8A%E5%AD%90%E7%BA%A7%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>在工作中碰到一个需求，ztree控件过滤跟当前用户部门无关的其他部门，并且当前用户可能横跨多个部门</p>
<h4 id="假设有一张省市区表"><a href="#假设有一张省市区表" class="headerlink" title="假设有一张省市区表"></a>假设有一张省市区表</h4><h3 id="根据id查询所有的子数据"><a href="#根据id查询所有的子数据" class="headerlink" title="根据id查询所有的子数据"></a>根据id查询所有的子数据</h3><pre><code>需求1：我输入山东省的id,会把山东省及下面的市区都查询出来
</code></pre>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> REGION </span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> id <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> prior id <span class="operator">=</span> pid <span class="comment">-- prior 右边是子级id，就往子级的方向查询</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure>
<pre><code>结果：
</code></pre>
<img src="/2023/03/13/ORACLE%E6%A0%B9%E6%8D%AE%E4%BB%BB%E6%84%8Fid%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%88%B6%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%8F%8A%E5%AD%90%E7%BA%A7%E6%95%B0%E6%8D%AE/1.png" class="">

<h3 id="根据id查询所有的父数据"><a href="#根据id查询所有的父数据" class="headerlink" title="根据id查询所有的父数据"></a>根据id查询所有的父数据</h3><pre><code>需求2：我输入黄岛区的id,会把黄岛区及其所在的市省国查询出来
</code></pre>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> REGION </span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> id <span class="operator">=</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> prior pid <span class="operator">=</span> id <span class="comment">-- prior 右边是父id，就往父级的方向查询</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure>
<pre><code>结果：
</code></pre>
<img src="/2023/03/13/ORACLE%E6%A0%B9%E6%8D%AE%E4%BB%BB%E6%84%8Fid%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%88%B6%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%8F%8A%E5%AD%90%E7%BA%A7%E6%95%B0%E6%8D%AE/2.png" class="">

<h3 id="通过对这两种方法进行结合，完成我需要的数据过滤"><a href="#通过对这两种方法进行结合，完成我需要的数据过滤" class="headerlink" title="通过对这两种方法进行结合，完成我需要的数据过滤"></a>通过对这两种方法进行结合，完成我需要的数据过滤</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> d.dept_id,d.parent_id,d.dept_name,d.order_num</span><br><span class="line">  <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">          <span class="keyword">from</span> sys_dept t</span><br><span class="line">         <span class="keyword">start</span> <span class="keyword">with</span> t.dept_id <span class="keyword">in</span> (<span class="string">&#x27;310&#x27;</span>,<span class="string">&#x27;301&#x27;</span>)</span><br><span class="line">        <span class="keyword">connect</span> <span class="keyword">by</span> prior dept_id <span class="operator">=</span> parent_id <span class="comment">-- prior 右边是子级id，就往子级的方向查询</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">          <span class="keyword">from</span> sys_dept t</span><br><span class="line">         <span class="keyword">start</span> <span class="keyword">with</span> t.dept_id <span class="keyword">in</span> (<span class="string">&#x27;310&#x27;</span>,<span class="string">&#x27;301&#x27;</span>)</span><br><span class="line">        <span class="keyword">connect</span> <span class="keyword">by</span> prior t.parent_id <span class="operator">=</span> dept_id) d <span class="comment">-- prior 右边是父id，就往父级的方向查询</span></span><br><span class="line"> <span class="keyword">where</span> del_flag <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> parent_id, order_num</span><br></pre></td></tr></table></figure>
<pre><code>结果：
</code></pre>
<img src="/2023/03/13/ORACLE%E6%A0%B9%E6%8D%AE%E4%BB%BB%E6%84%8Fid%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%88%B6%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%8F%8A%E5%AD%90%E7%BA%A7%E6%95%B0%E6%8D%AE/3.png" class="">
<pre><code>注：连子集和父集都包含了当前部门数据，还有同时查几个部门，父集子集都会重复几次
所以需要distinct
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC controller用Map接收任意参数</title>
    <url>/2018/08/17/SpringMVC-controller%E7%94%A8Map%E6%8E%A5%E6%94%B6%E4%BB%BB%E6%84%8F%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value=&quot;/test&quot;,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String test(@RequestParam Map&lt;String,String&gt; map)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>map前边要加上@RequestParam，参数才能自动进入到map中</p>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>URL传参将+号变成空格解决方案</title>
    <url>/2018/01/30/URL%E4%BC%A0%E5%8F%82%E5%B0%86-%E5%8F%B7%E5%8F%98%E6%88%90%E7%A9%BA%E6%A0%BC%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="问题：使用url传递参数时会将-号转义成空格"><a href="#问题：使用url传递参数时会将-号转义成空格" class="headerlink" title="问题：使用url传递参数时会将+号转义成空格"></a><strong>问题：</strong>使用url传递参数时会将+号转义成空格</h2><p><strong>解决方案：</strong></p>
<pre><code>方案一：
    修改客户端，将客户端带“+”的参数中的“+”全部替换为‍“2B%”，这样参数传到服务器端时就能得到“+”了。

方案二：
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encodeURIComponent(querySql);</span><br><span class="line">strURL = &quot;search.do?param=&quot; + encodeURIComponent(str);</span><br></pre></td></tr></table></figure>
    普通的传参出现乱码问题，可使用encodeURI来转译，它会转译成UTF-8的格式;
    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strURL = &quot;search.do?param=&quot; + encodeURI(str);</span><br></pre></td></tr></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>addClass+siblings+removeClass用法</title>
    <url>/2024/01/11/addClass-siblings-removeClass%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>在一个项目中，通过这个方法实现了一排按钮，点击给当前选中按钮加上背景色，上一个选中的按钮则去掉背景色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#xm ul li&quot;).click(function () &#123;</span><br><span class="line">    $(this).addClass(&quot;listyle&quot;).siblings().removeClass(&quot;listyle&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>addClass：当前元素添加class<br>siblings()：查找所有兄弟元素<br>removeClass：删除class</p>
<p>组合起来可以实现当前选中元素加上class事件，其余兄弟元素去掉class</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap File Input 多文件上传插件使用记录（一）配置及批量同步上传</title>
    <url>/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%89%B9%E9%87%8F%E5%90%8C%E6%AD%A5%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>1.在表单中上传多张图片，并且表单中还要其他数据。<br>2.上传成功后关闭弹出框，并重置上传插件。</p>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form id=&quot;add_commodity_form&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">         ...//其他form参数</span><br><span class="line">        &lt;div class=&quot;form-group&quot; style=&quot;width:99%&quot;&gt;</span><br><span class="line">           &lt;input id=&quot;add_bachPic&quot; name=&quot;commoPicArr&quot; type=&quot;file&quot; multiple  class=&quot;file-loading&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //初始化文件上传插件</span><br><span class="line">function initFileUpload(prefix)&#123;</span><br><span class="line">    $(&quot;#add_bachPic&quot;).fileinput(&#123;</span><br><span class="line">    	language: &#x27;zh&#x27;,                                 //中文</span><br><span class="line">    	uploadUrl:&#x27;&lt;%=basePath%&gt;/commodity/addCommodityPic&#x27;,</span><br><span class="line">    	showPreview: true,				//展前预览</span><br><span class="line">    	showUpload: false,				//不显示上传按钮</span><br><span class="line">    	showCaption: false,				//不显示文字表述</span><br><span class="line">    	uploadAsync:false,                             //采用同步上传</span><br><span class="line">    	removeFromPreviewOnError:true,                 //当文件不符合规则，就不显示预览</span><br><span class="line">    	maxFileCount: 5,</span><br><span class="line">    	maxFileSize: 1024*10,                          //单位为kb，如果为0表示不限制文件大小</span><br><span class="line">    	allowedFileExtensions: [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;,&quot;bmp&quot;],</span><br><span class="line">        uploadExtraData: function(previewId, index) &#123;   //额外参数 返回json数组</span><br><span class="line">                  return &#123;</span><br><span class="line">                          &#x27;id&#x27;:commId</span><br><span class="line">                         &#125;;</span><br><span class="line">                  &#125;</span><br><span class="line">        &#125;).on(&quot;filebatchuploadsuccess&quot;, function(event, data) &#123;	//当上传成功回调函数</span><br><span class="line">                var response = data.response;</span><br><span class="line">                if(response.resultCode==&#x27;0&#x27;)&#123;</span><br><span class="line">                        $(&quot;#closedAddWin&quot;).click();</span><br><span class="line">	 	        table.ajax.reload();</span><br><span class="line">		&#125;</span><br><span class="line">	    &#125;);</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>
<p> 原来我的思路是不使用插件的上传按钮，而自己通过js将插件里面的多文件与表单一起提交，但是到后台只能获取到最后一个文件，我不是文件数组。我查了很多办法好像都没办法，后来改变思路：还是自己用js触发提交表单，只是先将表单其他数据传到后台保存返回数据库id,然后通过 $(‘#add_bachPic’).fileinput(‘upload’);触发提交文件上传，并传递额外参数id,最后保存成功！</p>
<h3 id="确认新增按钮"><a href="#确认新增按钮" class="headerlink" title="确认新增按钮"></a>确认新增按钮</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var commId;</span><br><span class="line">function addCommodity()&#123;</span><br><span class="line"> </span><br><span class="line">	if($(&#x27;#add_bachPic&#x27;).fileinput(&quot;getFilesCount&quot;)&lt;=0)&#123;          //获取文件个数</span><br><span class="line">		myAlert(1,&quot;请至少上传一张详情图片!&quot;);</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	$(&quot;#add_commodity_form&quot;).attr(&#x27;action&#x27;,&#x27;&lt;%=basePath%&gt;/commodity/addCommodity&#x27;);</span><br><span class="line">	$(&quot;#add_commodity_form&quot;).ajaxSubmit(&#123;</span><br><span class="line">  	       success : function(data)&#123;</span><br><span class="line">                        var result = $.parseJSON(data);</span><br><span class="line">                        if(result.resultCode == 0)&#123;</span><br><span class="line">                                var id = result.result;	                //先保存基本数据，返回数据库id</span><br><span class="line">                                commId = id;                            //保存id值</span><br><span class="line">                                $(&#x27;#add_bachPic&#x27;).fileinput(&#x27;upload&#x27;);        //然后触发插件开始上传文件</span><br><span class="line">                        &#125;	</span><br><span class="line">               &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller代码"><a href="#controller代码" class="headerlink" title="controller代码"></a>controller代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      /**</span><br><span class="line">	 * </span><br><span class="line">	 * @MethodName: addCommodityPic</span><br><span class="line">	 * @Description: 商品信息管理：新增详情图片</span><br><span class="line">	 * @param param</span><br><span class="line">	 * @return DataGrid</span><br><span class="line">	 */</span><br><span class="line">	@RequestMapping(&quot;/addCommodityPic&quot;)</span><br><span class="line">	@ResponseBody</span><br><span class="line">	public Result addCommodityPic(Long id,HttpServletRequest request,@RequestParam MultipartFile[] commoPicArr)&#123;</span><br><span class="line">	Result result = new Result(Result.FAIL, &quot;新增商品失败！&quot;);</span><br><span class="line">	try&#123;</span><br><span class="line">		//commoPicArr数组则是上传的多文件，然后就可以做进一步处理，在此省略....</span><br><span class="line"></span><br><span class="line">		.....</span><br><span class="line">		int a = commService.updateCommodityPic(vo);</span><br><span class="line">		if(a&gt;0)&#123;</span><br><span class="line">			result.setResultCode(Result.SUCC);</span><br><span class="line">			result.setMsg(&quot;新增商品成功!&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		logger.error(&quot;商品信息管理：新增图片&quot;, e.getCause());</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后台代码通过同步上传就能获取到文件数组，然后就可以做进一步处理了，这里就不详细说java代码了。当重新打开对话框，需要对插件进行重置，可以使用方法<br>$(“#add_bachPic”).fileinput(‘reset’); &#x2F;&#x2F;重置预览表中的所有文件，<br>还有其他的方法例如$(“#add_bachPic”).fileinput(‘clear’); 只是清理还未上传的预览，上传成功的不会清除。</p>
<img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%89%B9%E9%87%8F%E5%90%8C%E6%AD%A5%E4%B8%8A%E4%BC%A0/1.png" class="">
<p>如果想限制图片不能单独上传，也就是不显示预览中的上传按钮，我的做法很简单粗暴，直接取源码中删除了这个方法</p>
<img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%89%B9%E9%87%8F%E5%90%8C%E6%AD%A5%E4%B8%8A%E4%BC%A0/2.png" class="">
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%89%B9%E9%87%8F%E5%90%8C%E6%AD%A5%E4%B8%8A%E4%BC%A0/3.png" class="">
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>Bootstrap</tag>
        <tag>未验证</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap File Input 多文件上传插件使用记录（二）删除原文件</title>
    <url>/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%A0%E9%99%A4%E5%8E%9F%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>在后台管理框架中，一条数据中包含不固定的多张图片属性，然后需要同其他数据一起做增删改查。多文件同时新增上一篇已经做过了，需要的请点击打开链接，但是编辑的时候，就需要吧原来上传的图片展示出来，然后可以进行删除和重新上传，，这就是我现在要做的功能。</p>
<img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%A0%E9%99%A4%E5%8E%9F%E6%96%87%E4%BB%B6/1.png" class="">

<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;  </span><br><span class="line">     .......//其他数据  </span><br><span class="line">     &lt;div class=&quot;form-group&quot; style=&quot;width:99%&quot;&gt;  </span><br><span class="line">         &lt;input id=&quot;update_bachPic&quot; name=&quot;commoPicArr&quot; type=&quot;file&quot; multiple &gt;  </span><br><span class="line">     &lt;/div&gt;  </span><br><span class="line">&lt;/form&gt;  </span><br></pre></td></tr></table></figure>
<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>当点击数据的编辑按钮，则通过后台返回的数据初始化编辑页面，并初始化文件上传插件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#update_bachPic&quot;).fileinput(&#123;  </span><br><span class="line">        language: &#x27;zh&#x27;,                                        //语言  </span><br><span class="line">        uploadUrl:&#x27;&lt;%=basePath%&gt;/commodity/addCommodityPic&#x27;,   //上传地址  </span><br><span class="line">        showPreview: true,              //展前预览  </span><br><span class="line">        showUpload: false,              //显示上传按钮  </span><br><span class="line">        showCaption: false,             //显示文字表述  </span><br><span class="line">        uploadAsync:false,                             //false 同步上传，后台用数组接收，true 异步上传，每次上传一个file,会调用多次接口  </span><br><span class="line">        removeFromPreviewOnError:true, //当选择的文件不符合规则时，例如不是指定后缀文件、大小超出配置等，选择的文件不会出现在预览框中，只会显示错误信息  </span><br><span class="line">        maxFileCount: 5,  </span><br><span class="line">        maxFileSize: 1024*10,           //单位为kb，如果为0表示不限制文件大小  </span><br><span class="line">        allowedFileExtensions: [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;,&quot;bmp&quot;],  </span><br><span class="line">                                  </span><br><span class="line">        previewFileIcon: &quot;&lt;i class=&#x27;glyphicon glyphicon-king&#x27;&gt;&lt;/i&gt;&quot;,  </span><br><span class="line">        overwriteInitial: false,  </span><br><span class="line">        initialPreviewAsData: true,  </span><br><span class="line">        initialPreview: [        //这里配置需要初始展示的图片连接数组，字符串类型的，通常是通过后台获取后然后组装成数组直接赋给initialPreview就行了  </span><br><span class="line">                        &quot;http://......img&quot;,  </span><br><span class="line">                        &quot;http://......img&quot;,  </span><br><span class="line">                        ],  </span><br><span class="line">        initialPreviewConfig: [ //配置预览中的一些参数   </span><br><span class="line">                                &#123;caption: &quot;transport-1.jpg&quot;, size: 329892, width: &quot;120px&quot;, url: &quot;deletePic&quot;, key: 1&#125;,  </span><br><span class="line">                                &#123;caption: &quot;transport-2.jpg&quot;, size: 872378, width: &quot;120px&quot;, url: &quot;deletePic&quot;, key: 2&#125;  </span><br><span class="line">                              ]  </span><br><span class="line">        &#125;).on(&#x27;filepredelete&#x27;, function(event, key, jqXHR, data) &#123;  </span><br><span class="line">                    console.log(&#x27;Key = &#x27; + key);  </span><br><span class="line">                    console.log(jqXHR);  </span><br><span class="line">                    console.log(data);   </span><br><span class="line">        &#125;);  </span><br></pre></td></tr></table></figure>
<p>注意：<br>    配置initialPreview:[ ] 配置的是数组，也就是需要初始展示图片的地址数组，字符串类型，当然通常是通过ajax从后台获取到链接后再组装成数组直接赋给他就行了。<br>    配置initialPreviewConfig:[ ]也是一个数组,他主要是配置预览图片的相关显示参数，名字啊、大小啊。但是最重要的配置是url，他是你在点击图中的删除按钮后，会调用的地址，然后通过ajax去后台删除原图片。配置key，表示删除的时候向后台传递的参数，看图：<br>    <img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%A0%E9%99%A4%E5%8E%9F%E6%96%87%E4%BB%B6/2.png" class=""><br>    很神奇，你会发现，在url中我只配置了deletePic，但是通过调试发现，删除请求的url竟然自动拼接了前面的一段url，我猜测可能是从上面的配置updateUrl而来，或者是从请求头中的Referer而来。<br>    配置的key是请求传递的参数，实测发现名字key不能改成自己的其他名字，而且传递的值不能是对象，这就有个问题了，万一我想传多个值怎么办？那就自己动手丰衣足食，改造源码吧。。</p>
<h3 id="更改fileinput-js源码"><a href="#更改fileinput-js源码" class="headerlink" title="更改fileinput.js源码"></a>更改fileinput.js源码</h3><p>需求一：将key传递的参数改为： key: “{‘id’:’1’,’name’:’name1’}”<br>注意：既然直接传递对象不行，那就传递json字符串吧，然后在源码中转换成json不就行了？</p>
<img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%A0%E9%99%A4%E5%8E%9F%E6%96%87%E4%BB%B6/3.png" class="">
<p>更改源码中2379行左右，当点击删除按钮时，会调用settings,里面就是已经配置好的参数，我们获取key值，然后将单引号替换成双引号，然后转换为json对象，替换data参数。</p>
<p>这里为什么要替换单引号为双引号，为什么不直接在key配置的时候就写双引号呢？别问，我试了，不行，转换会出错，要不就是传递不过来，不然我也不会使用这个多此一举的办法啊。。。你直接传递json字符串到后台，用后台代码解析为json也可以。。然后我们的调试请求发现传递的值就变成我们想要的了。。</p>
<img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%A0%E9%99%A4%E5%8E%9F%E6%96%87%E4%BB%B6/4.png" class="">
<p>好，传值的问题解决了。就可以点击按钮的时候去后台删除此图片了，并传递我们其他的参数。新选择的图片并不会调用后台方法，会直接删除的。</p>
<p>需求二：当用户点击删除按钮的时候，提示他这是原图片，并问他是否确认删除，确认后才去后台调用删除，取消则不删除。这是为了避免用户点错，而导致删除了原图片，那么久需要在后台调用ajax之前执行一段我们的提示代码。<br>解决：查看API，发现了这么几个事件可以调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> $(&#x27;#input-id&#x27;).on(&#x27;filepreremove&#x27;, function(event, id, index) &#123;       //只是你删除重新选择的图片才会触发，而删除原图片不会触发。</span><br><span class="line">    console.log(&#x27;id = &#x27; + id + &#x27;, index = &#x27; + index);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(&#x27;#input-id&#x27;).on(&#x27;filepredelete&#x27;, function(event, key, jqXHR, data) &#123;  //就是在删除原图片之前触发，而新选择的图片不会触发。能满足我们的要求。</span><br><span class="line">   console.log(&#x27;Key = &#x27; + key);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>解决一：<br>    采用filepredelete时间监听，在删除之前询问用户是否确定，并在确定后执行后面的。如果采用一般bootstrap的询问框，都是采用回调的方式监听用户操作的，还没等回调结束，后面的代码就已经开始调用ajax执行删除了。所以需要一个js线程的暂停机制，类似于alert，当用户操作后再往下执行，原始的js confirm()方法可以实现询问，然后点击确定则继续执行，所以代码改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#update_bachPic&quot;).fileinput(&#123;  </span><br><span class="line">        language: &#x27;zh&#x27;,  </span><br><span class="line">        uploadUrl:&#x27;&lt;%=basePath%&gt;/commodity/addCommodityPic&#x27;,  </span><br><span class="line">        showPreview: true,              //展前预览  </span><br><span class="line">        showUpload: false,              //显示上传按钮  </span><br><span class="line">        showCaption: false,             //显示文字表述  </span><br><span class="line">        uploadAsync:false,  </span><br><span class="line">        removeFromPreviewOnError:true,  </span><br><span class="line">        maxFileCount: 5,  </span><br><span class="line">        maxFileSize: 1024*10,           //单位为kb，如果为0表示不限制文件大小  </span><br><span class="line">        allowedFileExtensions: [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;,&quot;bmp&quot;],  </span><br><span class="line">        previewFileIcon: &quot;&lt;i class=&#x27;glyphicon glyphicon-king&#x27;&gt;&lt;/i&gt;&quot;,  </span><br><span class="line">        overwriteInitial: false,  </span><br><span class="line">        initialPreviewAsData: true,  </span><br><span class="line">        initialPreview: urlArr,  </span><br><span class="line">        initialPreviewConfig: [  </span><br><span class="line">                            &#123;caption: &quot;transport-1.jpg&quot;, size: 329892, width: &quot;120px&quot;, url: &quot;deletePic&quot;, key: &quot;&#123;&#x27;id&#x27;:&#x27;1&#x27;,&#x27;name&#x27;:&#x27;name1&#x27;&#125;&quot;&#125;,  </span><br><span class="line">                            &#123;caption: &quot;transport-2.jpg&quot;, size: 872378, width: &quot;120px&quot;, url: &quot;deletePic&quot;, key: &quot;&#123;&#x27;id&#x27;:&#x27;1&#x27;,&#x27;name&#x27;:&#x27;name1&#x27;&#125;&quot;&#125;,  </span><br><span class="line">                            ]  </span><br><span class="line">        &#125;).on(&#x27;filepredelete&#x27;, function(event, key, jqXHR, data) &#123;  </span><br><span class="line">                if(!confirm(&quot;确定删除原文件？删除后不可恢复&quot;))&#123;  </span><br><span class="line">                    return false;  </span><br><span class="line">                &#125;  </span><br><span class="line">        &#125;);  </span><br></pre></td></tr></table></figure>
<img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%A0%E9%99%A4%E5%8E%9F%E6%96%87%E4%BB%B6/5.png" class="">
<p>当用户点击取消，则返回false,到源码中去阻止事件的继续执行。</p>
<img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%A0%E9%99%A4%E5%8E%9F%E6%96%87%E4%BB%B6/6.png" class="">
<p>在源码2323行左右，执行ajax方法中beforSend，我们在filepredelete中返回false，返回false则再return给beforSend，他就会停止执行ajax方法，从而达到我们的目的。</p>
<p>这种方法确实能实现我们的要求，但是使用原始的confirm难免有些难看，也不符合整个系统的UI。但是使用bootstrap其他的询问框，则没办法实现线程暂停机制。但是我们可以在他执行ajax之前去判断，从而阻止执行。</p>
<p>解决二：</p>
<p>  更改源码2379行左右，当点击删除按钮时，调用$.ajax（setting）方法之前采用其他bootstrap询问插件来监听，当然你也可以把他封装成一个内部事件，在初始化fileinput的时候去监听，</p>
<img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%A0%E9%99%A4%E5%8E%9F%E6%96%87%E4%BB%B6/7.png" class="">

<img src="/2023/03/02/bootstrap-File-Input-%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%E5%88%A0%E9%99%A4%E5%8E%9F%E6%96%87%E4%BB%B6/8.png" class="">
<p>好了，这就是一些简单的删除原文件的方法，其中不乏需要我们去更改源码来符合我们的需求。后面使用中还遇到什么问题，再来研究吧。</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>Bootstrap</tag>
        <tag>未验证</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署mysql</title>
    <url>/2023/06/02/docker%E9%83%A8%E7%BD%B2mysql/</url>
    <content><![CDATA[<p>首先拉取mysql镜像<br>docker pull mysql:8.0.28</p>
<p>&#x2F;&#x2F;一键部署mysql<br>docker run -p 3306:3306 –name mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:8.0.28<br>&#x2F;&#x2F;启动docker<br>sudo systemctl start docker</p>
<p>&#x2F;&#x2F;docker安装mysql后更改密码连接方式<br>1.进入容器<br>docker exec -it mysql &#x2F;bin&#x2F;bash</p>
<ol start="2">
<li>登录mysql<br>mysql -u root -p</li>
</ol>
<p>ps:我新装的docker这个命令不好使，使用的另一个命令<br>首先执行 docker ps -a 查看mysql的容器id<br>然后执行 docker exec -it xxxxxxx mysql -u root -p<br>等同于执行了1、2两步</p>
<ol start="3">
<li>输入密码<br>输入mysql安装时设置的密码（123456）</li>
<li>切换数据库<br>use mysql;</li>
<li>修改密码方式<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘123456’;</li>
<li>刷新生效<br>FLUSH PRIVILEGES;</li>
<li>退出mysql<br>exiit;<br>5.退出容器<br>exit;<br>三. 关机后再次开机启动mysql容器<br>docker start mysql</li>
</ol>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署及一些常用命令</title>
    <url>/2023/06/02/docker%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>docker部署需要centos7环境</p>
<p>官方一键安装docker命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>docker的一些常用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看docker内的全部容器</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">结束指定端口号的任务</span><br><span class="line">docker stop 123234234</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动指定端口号的任务</span><br><span class="line">docker start 123123123</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">删除指定端口号的容器</span><br><span class="line">docker rm 123123123</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客添加搜索功能</title>
    <url>/2023/03/02/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在自己博客根目录下（我的目录：D:\workspace\hexo），执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h3 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h3><p>修改根目录下的_config.yml（我的目录：D:\workspace\hexo_config.yml），在最底部添加如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<h3 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h3><p>修改主题下的themes\butterfly\ _config.yml配置文件（我的目录：D:\workspace\hexo\themes\butterfly\ _config.yml），搜索local_search，修改enable为true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>

<h3 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h3><p>开启本地server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>访问：<a href="http://localhost:4000/">http://localhost:4000/</a> ，即可看到想要的搜索功能了</p>
<h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p>这个搜索功能非常卡，连本地搜索效率也难以保证，就更别说git服务器上了，所以不打算开启这个功能</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>idea spring-boot热部署</title>
    <url>/2022/05/09/idea%20spring-boot%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<ul>
<li><h2 id="引入spring-boot-devtools-jar包"><a href="#引入spring-boot-devtools-jar包" class="headerlink" title="引入spring-boot-devtools jar包"></a>引入spring-boot-devtools jar包</h2><ul>
<li>pom写法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">     &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><h2 id="设置idea"><a href="#设置idea" class="headerlink" title="设置idea"></a>设置idea</h2><ul>
<li><code>“File” -&gt; “Settings” -&gt; “Build,Execution,Deplyment” -&gt; “Compiler”</code>选中 <code>“Build project automatically”</code>打勾。</li>
<li><code>“File” -&gt; “Settings” -&gt; &quot;Advanced Settings&quot;</code><img src="/2022/05/09/idea%20spring-boot%E7%83%AD%E9%83%A8%E7%BD%B2/1.jpg" class=""></li>
<li>选中打勾</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>开发工具配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>idea修改jar源码并重新打包</title>
    <url>/2023/08/25/idea%E4%BF%AE%E6%94%B9jar%E6%BA%90%E7%A0%81%E5%B9%B6%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<p>1、在idea中找到我们需要修改的源文件(属于哪个jar)</p>
<p>2、文件中找到那个jar，进行备份</p>
<p>3、idea中可以直接查看jar包源码，对需要修改的class源码进行复制</p>
<p>4、在项目中新建一个跟待修改的class文件一样路径的package和Java文件，把待修改的class文件内容复制到新建的Java文件中</p>
<p>5、修改完成后，选中修改的文件，右键 Build Module ‘test’,然后在项目中找到这个路径下的class文件，如果找不到单独的class文件编译选项，就直接build整个项目,再去target中找class文件</p>
<p>6、将原来的jar包进行解压缩，替换掉原来的class文件</p>
<p>7、在jar包解压缩的目录中打开cmd命令窗，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar -cfM0 jar包名.jar *</span><br></pre></td></tr></table></figure>
<p>命令将解压的jar包文件重新打成jar包</p>
]]></content>
      <categories>
        <category>开发工具配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>idea项目关联svn</title>
    <url>/2023/01/10/idea%E9%A1%B9%E7%9B%AE%E5%85%B3%E8%81%94svn/</url>
    <content><![CDATA[<h2 id="由于一直没研究明白如何在idea中配置svn，所以想了个曲线救国的方案。"><a href="#由于一直没研究明白如何在idea中配置svn，所以想了个曲线救国的方案。" class="headerlink" title="由于一直没研究明白如何在idea中配置svn，所以想了个曲线救国的方案。"></a>由于一直没研究明白如何在idea中配置svn，所以想了个曲线救国的方案。</h2><ul>
<li><h3 id="先在一个空白文件通过SVN-checkout导出项目"><a href="#先在一个空白文件通过SVN-checkout导出项目" class="headerlink" title="先在一个空白文件通过SVN checkout导出项目"></a>先在一个空白文件通过SVN checkout导出项目</h3><img src="/2023/01/10/idea%E9%A1%B9%E7%9B%AE%E5%85%B3%E8%81%94svn/1.png" class=""></li>
<li><h3 id="然后将down下来的-svn文件替换idea工程中的-svn文件，既可完成idea关联svn项目"><a href="#然后将down下来的-svn文件替换idea工程中的-svn文件，既可完成idea关联svn项目" class="headerlink" title="然后将down下来的.svn文件替换idea工程中的.svn文件，既可完成idea关联svn项目"></a>然后将down下来的.svn文件替换idea工程中的.svn文件，既可完成idea关联svn项目</h3></li>
</ul>
]]></content>
      <categories>
        <category>开发工具配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>java生成tree结构数据工具类</title>
    <url>/2021/05/19/java%E7%94%9F%E6%88%90tree%E7%BB%93%E6%9E%84%E6%95%B0%E6%8D%AE%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ComboTree implements Serializable&#123;</span><br><span class="line">    private String id;//：节点ID，对加载远程数据很重要。</span><br><span class="line">    private String text;//：显示节点文本。</span><br><span class="line">    private String parentid;//：节点ID，对加载远程数据很重要。</span><br><span class="line">    private String state;//：节点状态，’open’ 或 ‘closed’，默认：’open’。如果为’closed’的时候，将不自动展开该节点。</span><br><span class="line">    private boolean checked;//：表示该节点是否被选中。</span><br><span class="line">    private String attributes;//: 被添加到节点的自定义属性。</span><br><span class="line">    private List&lt;ComboTree&gt; children;//: 一个节点数组声明了若干节点。</span><br><span class="line"> </span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getParentid() &#123;</span><br><span class="line">        return parentid;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setParentid(String parentid) &#123;</span><br><span class="line">        this.parentid = parentid;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getText() &#123;</span><br><span class="line">        return text;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setText(String text) &#123;</span><br><span class="line">        this.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getState() &#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setState(String state) &#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public boolean isChecked() &#123;</span><br><span class="line">        return checked;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setChecked(boolean checked) &#123;</span><br><span class="line">        this.checked = checked;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getAttributes() &#123;</span><br><span class="line">        return attributes;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setAttributes(String attributes) &#123;</span><br><span class="line">        this.attributes = attributes;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public List&lt;ComboTree&gt; getChildren() &#123;</span><br><span class="line">        return children;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setChildren(List&lt;ComboTree&gt; children) &#123;</span><br><span class="line">        this.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TreeUtils &#123;</span><br><span class="line"> </span><br><span class="line">    private List&lt;ComboTree&gt; menuList = new ArrayList&lt;ComboTree&gt;();</span><br><span class="line"> </span><br><span class="line">    public TreeUtils(List&lt;ComboTree&gt; menuList) &#123;</span><br><span class="line">        this.menuList = menuList;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //建立树形结构</span><br><span class="line">    public List&lt;ComboTree&gt; builTree() &#123;</span><br><span class="line">        List&lt;ComboTree&gt; treeMenus = new ArrayList&lt;ComboTree&gt;();</span><br><span class="line">        for (ComboTree menuNode : getRootNode()) &#123;</span><br><span class="line">            menuNode = buildChilTree(menuNode);</span><br><span class="line">            treeMenus.add(menuNode);</span><br><span class="line">        &#125;</span><br><span class="line">        return treeMenus;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //递归，建立子树形结构</span><br><span class="line">    private ComboTree buildChilTree(ComboTree pNode) &#123;</span><br><span class="line">        List&lt;ComboTree&gt; chilMenus = new ArrayList&lt;ComboTree&gt;();</span><br><span class="line">        for (ComboTree menuNode : menuList) &#123;</span><br><span class="line">            if (menuNode.getParentid().equals(pNode.getId())) &#123;</span><br><span class="line">                chilMenus.add(buildChilTree(menuNode));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pNode.setChildren(chilMenus);</span><br><span class="line">        return pNode;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //获取根节点</span><br><span class="line">    private List&lt;ComboTree&gt; getRootNode() &#123;</span><br><span class="line">        List&lt;ComboTree&gt; rootMenuLists = new ArrayList&lt;ComboTree&gt;();</span><br><span class="line">        for (ComboTree menuNode : menuList) &#123;</span><br><span class="line">        	//800000000000:顶层父节点，可以改成动态传入</span><br><span class="line">            if (menuNode.getParentid().equals(&quot;800000000000&quot;)) &#123;</span><br><span class="line">                rootMenuLists.add(menuNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return rootMenuLists;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>iframe嵌套时父子页面互相调用的问题</title>
    <url>/2018/10/31/iframe%E5%B5%8C%E5%A5%97%E6%97%B6%E7%88%B6%E5%AD%90%E9%A1%B5%E9%9D%A2%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>子页面调用父页面的方法：parent.父页面方法名();</p>
<p>父页面调用子页面的方法：</p>
<p><code>var child=$(&quot;#testIframe&quot;)[0].contentWindow;</code></p>
<p>child.子页面方法名();</p>
<p>注：testIframe为iframe的id</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>linux部署hive</title>
    <url>/2023/06/02/linux%E9%83%A8%E7%BD%B2hive/</url>
    <content><![CDATA[<p>环境要求：<br>    1、拥有一台 Centos Linux 机器<br>    2、 Centos Linux 安装好 JDK、配置好环境变量<br>    3、在 CentOS Linux 上安装好 Hadoop<br>    4、在 CentOS Linux 上安装好 MySQL（docker部署的mysql也可以）</p>
<p>下载hive<br>    hive 官网：<br>    <a href="https://hive.apache.org/">https://hive.apache.org/</a></p>
<pre><code>hive 安装包官网下载地址（官网，下载速度慢）：
https://dlcdn.apache.org/hive/hive-3.1.3/apache-hive-3.1.3-bin.tar.gz

hive 安装包国内镜像下载链接（清华大学开源软件镜像站，下载速度快）：
https://mirrors.tuna.tsinghua.edu.cn/apache/hive/hive-3.1.3/apache-hive-3.1.3-bin.tar.gz
</code></pre>
<p>上传 Hive 安装包、解压、放到安装位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入到root目录</span><br><span class="line">cd /root</span><br><span class="line"># 解压</span><br><span class="line">tar -zxvf apache-hive-3.1.3-bin.tar.gz</span><br><span class="line"># 创建安装目录</span><br><span class="line">mkdir /usr/local/hive</span><br><span class="line"># 将解压后的hive挪到创建的安装目录</span><br><span class="line">mv /root/apache-hive-3.1.3-bin/ /usr/local/hive/</span><br><span class="line"># 进入到安装目录</span><br><span class="line">cd /usr/local/hive/apache-hive-3.1.3-bin/</span><br><span class="line"># 查看</span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<p>配置 hive<br>    1、hive-site.xml<br>    在 hive 安装目录的 conf 目录下，创建 hive-site.xml 配置文件。并将以下内容写入其中。<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/hive/apache-hive-3.1.3-bin/conf/hive-site.xml</span><br></pre></td></tr></table></figure><br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">        &lt;!--hive 元数据库的JDBC驱动类，这里选则 MySQL--&gt;</span><br><span class="line">        &lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">        &lt;!--hive_metadata 为 hive 元数据在 MySQL 中的库名，注意字符集设置，由于是在XML中，URL中的&amp;需要转译为&amp;--&gt;</span><br><span class="line">        &lt;value&gt;jdbc:mysql://127.0.0.1:3306/hive_metadata?createDatabaseIfNotExist=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">        &lt;!--MySQL登录账户名--&gt;</span><br><span class="line">        &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">        &lt;!--MySQL登录密码--&gt;</span><br><span class="line">        &lt;value&gt;123456&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;!--hive 表数据在 HDFS 的默认位置。创建内部表时，如果不指定 location，表数据则存储与该位置。--&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/user/hive/warehouse/internal&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;!--hive 外部表数据在 HDFS 的默认位置。创建外部表时，如果不指定 location，表数据则存储与该位置。--&gt;</span><br><span class="line">        &lt;name&gt;hive.metastore.warehouse.external.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/user/hive/warehouse/external&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hive.server2.enable.doAs&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><br>    2、hive-env.sh<br>    将 hive 安装目录的 conf 目录下的 hive-env.sh.template 复制一份改名为 hive-env.sh 。<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/local/hive/apache-hive-3.1.3-bin/conf/hive-env.sh.template /usr/local/hive/apache-hive-3.1.3-bin/conf/hive-env.sh</span><br></pre></td></tr></table></figure><br>    对 ive-env.sh 进行修改，将 HADOOP_HOME 的注释放开，其值改为本机 Hadoop 的安装目录 &#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;hadoop-3.3.4 。即：<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/hive/apache-hive-3.1.3-bin/conf/hive-env.sh</span><br></pre></td></tr></table></figure><br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HADOOP_HOME=/usr/local/hadoop/hadoop-3.3.4</span><br></pre></td></tr></table></figure></p>
<p>放置 MySQL jdbc jar包<br>    Maven 中央仓库下载地址：<br>    <a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.30/mysql-connector-java-8.0.30.jar">https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.30/mysql-connector-java-8.0.30.jar</a><br>    将 mysql-connector-java-8.0.30.jar 上传到 &#x2F;usr&#x2F;local&#x2F;hive&#x2F;apache-hive-3.1.3-bin&#x2F;lib 下。</p>
<p>设置环境变量<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><br>    在文件末尾添加以下内容：<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HIVE_HOME=/usr/local/hive/apache-hive-3.1.3-bin</span><br><span class="line">export PATH=$HIVE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><br>    使环境变量生效：<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 运行配置文件</span><br><span class="line">source /etc/profile</span><br><span class="line"># 检查 PATH 中是否包含 $HIVE_HOME/bin 对应的绝对路径</span><br><span class="line">echo $PATH</span><br></pre></td></tr></table></figure></p>
<p>初始化元数据库<br>    初始化元数据库，指定元数据库类型为 MySQL 。<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看MySQL是否启动</span><br><span class="line">service mysqld status</span><br><span class="line"># 如果没有启动，则启动MySQL</span><br><span class="line">service mysqld start</span><br><span class="line">schematool -initSchema -dbType mysql</span><br></pre></td></tr></table></figure><br>    注：schematool 命令位于 &#x2F;usr&#x2F;local&#x2F;hive&#x2F;apache-hive-3.1.3-bin&#x2F;bin&#x2F; ，已经配置在环境变量path中，可以直接使用。<br>        docker部署的mysql有另外的命令</p>
<p>启动 Hadoop<br>    Hive 是依赖 MySQL 和 Hadoop 的，所以，先启动 MySQL、Hadoop。<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看Hadoop是否启动</span><br><span class="line">jps -l |grep hadoop</span><br><span class="line"># 如果没有启动，则启动Hadoop</span><br><span class="line">start-all.sh</span><br></pre></td></tr></table></figure></p>
<p>编写后台启动hive的脚本<br>    编写后台启动脚本：<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /usr/local/hive/apache-hive-3.1.3-bin/bin/start-hive-metastore-hiveserver2.sh</span><br></pre></td></tr></table></figure><br>    写入以下内容：<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">nohup hive --service metastore &gt;&gt; /usr/local/hive/apache-hive-3.1.3-bin/log/metastore.log 2&gt;&amp;1 &amp;</span><br><span class="line">nohup hive --service hiveserver2 &gt;&gt; /usr/local/hive/apache-hive-3.1.3-bin/log/hiveserver2.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 赋予启动脚本执行权限</span><br><span class="line">chmod +x /usr/local/hive/apache-hive-3.1.3-bin/bin/start-hive-metastore-hiveserver2.sh</span><br><span class="line"># 创建日志目录：</span><br><span class="line">mkdir /usr/local/hive/apache-hive-3.1.3-bin/log</span><br></pre></td></tr></table></figure></p>
<p>启动hive<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start-hive-metastore-hiveserver2.sh</span><br></pre></td></tr></table></figure><br>    查看两个日志，无报错即可<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -1000f /usr/local/hive/apache-hive-3.1.3-bin/log/metastore.log</span><br><span class="line">tail -1000f /usr/local/hive/apache-hive-3.1.3-bin/log/hiveserver2.log</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux部署sqoop</title>
    <url>/2023/06/13/linux%E9%83%A8%E7%BD%B2sqoop/</url>
    <content><![CDATA[<h2 id="sqoop简介"><a href="#sqoop简介" class="headerlink" title="sqoop简介"></a>sqoop简介</h2><font size=5>
Sqoop(发音：skup)是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。
Sqoop项目开始于2009年，最早是作为Hadoop的一个第三方模块存在，后来为了让使用者能够快速部署，也为了让开发人员能够更快速的迭代开发，Sqoop独立成为一个Apache项目。
Sqoop是一个在（MySQL、Oracle）等关系型数据库和大数据平台之间进行批量数据迁移的工具。Sqoop底层能实现将关系型数据库中的数据迁移到大数据平台上是因为sqoop的底层是采用MapReduce程序实现抽取、转换、加载，MapReduce本身就并行化和高容错率，能很好的保证数据的迁移，而且与Kettle等传统ETL工具相比，Sqoop的任务跑在Hadoop集群上，能有效减少ETL服务器资源的使用情况<br />
</font>


<h2 id="sqoop安装"><a href="#sqoop安装" class="headerlink" title="sqoop安装"></a>sqoop安装</h2><ul>
<li><h3 id="一、安装包的获取："><a href="#一、安装包的获取：" class="headerlink" title="一、安装包的获取："></a>一、安装包的获取：</h3><ul>
<li><h3 id="sqoop安装包："><a href="#sqoop安装包：" class="headerlink" title="sqoop安装包："></a>sqoop安装包：</h3>  官网：<a href="http://archive.apache.org/dist/sqoop/1.4.6/sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz">http://archive.apache.org/dist/sqoop/1.4.6/sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz</a></li>
<li><h3 id="mysql驱动："><a href="#mysql驱动：" class="headerlink" title="mysql驱动："></a>mysql驱动：</h3>  <a href="mysql-connector-java-8.0.30.jar" title="jar包">点击下载</a></li>
</ul>
</li>
<li><h2 id="二、上传安装包到服务器"><a href="#二、上传安装包到服务器" class="headerlink" title="二、上传安装包到服务器"></a>二、上传安装包到服务器</h2><ul>
<li><h3 id="将sqoop安装包上传到服务器上"><a href="#将sqoop安装包上传到服务器上" class="headerlink" title="将sqoop安装包上传到服务器上"></a>将sqoop安装包上传到服务器上</h3></li>
</ul>
</li>
<li><h2 id="三、进行安装配置"><a href="#三、进行安装配置" class="headerlink" title="三、进行安装配置"></a>三、进行安装配置</h2><ul>
<li><h3 id="解压sqoop压缩包"><a href="#解压sqoop压缩包" class="headerlink" title="解压sqoop压缩包"></a>解压sqoop压缩包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zvxf sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><h3 id="修改名字"><a href="#修改名字" class="headerlink" title="修改名字"></a>修改名字</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv sqoop-1.4.6.bin__hadoop-2.0.4-alpha sqoop</span><br></pre></td></tr></table></figure></li>
<li><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3></li>
<li><h3 id="在sqoop-x2F-conf-x2F-目录下修改sqoop-env-template-sh的名字"><a href="#在sqoop-x2F-conf-x2F-目录下修改sqoop-env-template-sh的名字" class="headerlink" title="在sqoop&#x2F;conf&#x2F;目录下修改sqoop-env-template.sh的名字"></a>在sqoop&#x2F;conf&#x2F;目录下修改sqoop-env-template.sh的名字</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv sqoop-env-template.sh sqoop-env.sh</span><br></pre></td></tr></table></figure></li>
<li><h3 id="向sqoop-env-sh中最后添加如下配置："><a href="#向sqoop-env-sh中最后添加如下配置：" class="headerlink" title="向sqoop-env.sh中最后添加如下配置："></a>向sqoop-env.sh中最后添加如下配置：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export HADOOP_COMMON_HOME=/opt/module/hadoop-2.7.2</span><br><span class="line">export HADOOP_MAPRED_HOME=/opt/module/hadoop-2.7.2</span><br><span class="line">export HIVE_HOME=/opt/module/hive</span><br><span class="line">export ZOOKEEPER_HOME=/opt/module/zookeeper-3.4.10</span><br><span class="line">export ZOOCFGDIR=/opt/module/zookeeper-3.4.10/conf</span><br><span class="line">export HBASE_HOME=/opt/module/hbase</span><br></pre></td></tr></table></figure>
<p>注：我的服务器没有装hbase和zookeeper，所以后边三个我没有配，暂时可以正常启动，以后要是发现有什么问题再进行补充</p>
</li>
<li><h3 id="将jdbc驱动拷贝到sqoop-x2F-lib-x2F-目录下"><a href="#将jdbc驱动拷贝到sqoop-x2F-lib-x2F-目录下" class="headerlink" title="将jdbc驱动拷贝到sqoop&#x2F;lib&#x2F;目录下"></a>将jdbc驱动拷贝到sqoop&#x2F;lib&#x2F;目录下</h3></li>
</ul>
</li>
<li><h2 id="四、验证sqoop"><a href="#四、验证sqoop" class="headerlink" title="四、验证sqoop"></a>四、验证sqoop</h2><ul>
<li><h3 id="使用一个command命令检查sqoop是否安装完成"><a href="#使用一个command命令检查sqoop是否安装完成" class="headerlink" title="使用一个command命令检查sqoop是否安装完成"></a>使用一个command命令检查sqoop是否安装完成</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/sqoop help</span><br></pre></td></tr></table></figure></li>
<li><h3 id="出现以下内容便是安装完成："><a href="#出现以下内容便是安装完成：" class="headerlink" title="出现以下内容便是安装完成："></a>出现以下内容便是安装完成：</h3><img src="/2023/06/13/linux%E9%83%A8%E7%BD%B2sqoop/1.jpg" class=""></li>
<li><h3 id="测试是否能连接上mysql数据库"><a href="#测试是否能连接上mysql数据库" class="headerlink" title="测试是否能连接上mysql数据库"></a>测试是否能连接上mysql数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/sqoop list-databases --connect jdbc:mysql://192.168.2.140:3306/ --username root --password 123456</span><br></pre></td></tr></table></figure></li>
<li><h3 id="如果连接成功会获取到当前mysql数据库中的数据库"><a href="#如果连接成功会获取到当前mysql数据库中的数据库" class="headerlink" title="如果连接成功会获取到当前mysql数据库中的数据库"></a>如果连接成功会获取到当前mysql数据库中的数据库</h3><img src="/2023/06/13/linux%E9%83%A8%E7%BD%B2sqoop/2.jpg" class=""></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle创建表空间</title>
    <url>/2023/01/10/oracle%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<ul>
<li><h2 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h2>  <img src="/2023/01/10/oracle%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%A9%BA%E9%97%B4/1.jpg" class="">
<ul>
<li><h3 id="使用Enterprise-Manager-Console"><a href="#使用Enterprise-Manager-Console" class="headerlink" title="使用Enterprise Manager Console"></a>使用Enterprise Manager Console</h3>  <img src="/2023/01/10/oracle%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%A9%BA%E9%97%B4/2.jpg" class=""></li>
<li><h3 id="账号密码都是sys，连接身份选择sysdba"><a href="#账号密码都是sys，连接身份选择sysdba" class="headerlink" title="账号密码都是sys，连接身份选择sysdba"></a>账号密码都是sys，连接身份选择sysdba</h3></li>
<li><h3 id="创建表空间，选项都是默认即可"><a href="#创建表空间，选项都是默认即可" class="headerlink" title="创建表空间，选项都是默认即可"></a>创建表空间，选项都是默认即可</h3>  <img src="/2023/01/10/oracle%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%A9%BA%E9%97%B4/3.jpg" class=""></li>
<li><h3 id="右键创建好的表空间，点击-添加数据文件"><a href="#右键创建好的表空间，点击-添加数据文件" class="headerlink" title="右键创建好的表空间，点击 添加数据文件"></a>右键创建好的表空间，点击 添加数据文件</h3>  <img src="/2023/01/10/oracle%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%A9%BA%E9%97%B4/4.jpg" class=""></li>
<li><h3 id="这个一般信息不用管"><a href="#这个一般信息不用管" class="headerlink" title="这个一般信息不用管"></a>这个一般信息不用管</h3>  <img src="/2023/01/10/oracle%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%A9%BA%E9%97%B4/5.jpg" class=""></li>
<li><h3 id="存储配置含义，数据存满后每次扩展3M，上限3个G"><a href="#存储配置含义，数据存满后每次扩展3M，上限3个G" class="headerlink" title="存储配置含义，数据存满后每次扩展3M，上限3个G"></a>存储配置含义，数据存满后每次扩展3M，上限3个G</h3></li>
</ul>
</li>
<li><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2>  <img src="/2023/01/10/oracle%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%A9%BA%E9%97%B4/6.jpg" class="">
  <img src="/2023/01/10/oracle%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%A9%BA%E9%97%B4/7.jpg" class="">
<ul>
<li><h3 id="一般信息页面中输入用户名密码，选择表空间"><a href="#一般信息页面中输入用户名密码，选择表空间" class="headerlink" title="一般信息页面中输入用户名密码，选择表空间"></a>一般信息页面中输入用户名密码，选择表空间</h3>  <img src="/2023/01/10/oracle%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%A9%BA%E9%97%B4/8.jpg" class=""></li>
<li><h3 id="角色中添加DBA，勾选上管理选项，点击创建即可"><a href="#角色中添加DBA，勾选上管理选项，点击创建即可" class="headerlink" title="角色中添加DBA，勾选上管理选项，点击创建即可"></a>角色中添加DBA，勾选上管理选项，点击创建即可</h3></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle导出数据</title>
    <url>/2023/03/03/oracle%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h3 id="导出表结构"><a href="#导出表结构" class="headerlink" title="导出表结构"></a>导出表结构</h3><pre><code>先导出一个建表语句sql
Tools -&gt;Export User Objects 
</code></pre>
<img src="/2023/03/03/oracle%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE/11.jpg" class="">
<pre><code>可以把所有表结构及序列、视图等信息导出。
</code></pre>
<h3 id="导出数据有两种方式："><a href="#导出数据有两种方式：" class="headerlink" title="导出数据有两种方式："></a>导出数据有两种方式：</h3><pre><code>1、plsql的PDE格式，兼容性比较好

2、用CMD命令导出dmp格式数据
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">exp dp/dp<span class="meta">@orcl</span> file=d:\dp.dmp</span><br></pre></td></tr></table></figure>
<pre><code>解析：exp 数据库账号/数据库密码@sid file=导出文件路径

PS：在服务器上导出的dmp只能用服务器端来导入，但是客户端导出的dmp文件既可以
用服务器端导入，也可以用客户端导入
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql实现ORACLE的partition by功能</title>
    <url>/2023/02/03/mysql%E5%AE%9E%E7%8E%B0ORACLE%E7%9A%84partition-by%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h2 id="oracle的partition-by是一个非常方便的数据排序过滤语法，但是mysql不支持。所以通过group-concat来模拟一下"><a href="#oracle的partition-by是一个非常方便的数据排序过滤语法，但是mysql不支持。所以通过group-concat来模拟一下" class="headerlink" title="oracle的partition by是一个非常方便的数据排序过滤语法，但是mysql不支持。所以通过group_concat来模拟一下"></a>oracle的partition by是一个非常方便的数据排序过滤语法，但是mysql不支持。所以通过group_concat来模拟一下</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT t.imei,lon,lat,id,substring_index( group_concat( t.create_time ORDER BY t.create_time DESC ), &#x27;,&#x27;, 1 ) createTime</span><br><span class="line">FROM (</span><br><span class="line">SELECT *</span><br><span class="line">FROM equip_bracelet_event ord </span><br><span class="line">WHERE</span><br><span class="line">	ord.lon is not null and ord.lat is not null</span><br><span class="line">	and ord.lon !=0 and ord.lat !=0</span><br><span class="line">	AND create_time &gt; 0 </span><br><span class="line">ORDER BY create_time DESC </span><br><span class="line">	) t </span><br><span class="line">GROUP BY imei</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>myeclipse项目更改jre版本</title>
    <url>/2018/02/05/myeclipse%E9%A1%B9%E7%9B%AE%E6%9B%B4%E6%94%B9jre%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p><font size=4>1.先安装jre<br>2.项目右键Properties<br>3.点击Java Build Path<br>4.在Libraries选项选择Add Library..<br>5.next<br>6.选择下边选项框Installed JREs<br>7.点击add<br>8.JRE Type界面选择Standard VM 点击next<br>9.找到jre安装目录<br>10.在下边勾选相应的jre版本</font></p>
]]></content>
      <categories>
        <category>开发工具配置</category>
      </categories>
      <tags>
        <tag>myEclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>sequence的用法</title>
    <url>/2023/01/10/sequence%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="oracle因为没有自增序列，所以可以用sequence序列加触发器来进行模拟功能。"><a href="#oracle因为没有自增序列，所以可以用sequence序列加触发器来进行模拟功能。" class="headerlink" title="oracle因为没有自增序列，所以可以用sequence序列加触发器来进行模拟功能。"></a>oracle因为没有自增序列，所以可以用sequence序列加触发器来进行模拟功能。</h3><ol>
<li><p>创建sequence</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create sequence SEQ_test_sequence_ID  --创建一个名叫SEQ_test_sequence_ID 的序列</span><br><span class="line"></span><br><span class="line">minvalue 1  --最小值是1</span><br><span class="line"></span><br><span class="line">maxvalue 99999999  --最大值是99999999  </span><br><span class="line"></span><br><span class="line">start with 1  --从1开始</span><br><span class="line"></span><br><span class="line">increment by 1  --每次增长1</span><br><span class="line"></span><br><span class="line">nocache</span><br><span class="line"></span><br><span class="line">order;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建触发器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE TRIGGER tg_on_id_chance_contract  --创建一个名叫tg_on_id_chance_contract  的触发器</span><br><span class="line">       BEFORE INSERT ON test_sequence FOR EACH ROW WHEN (new.ID is null)  --test_sequence（使用触发器的表名） new.ID（ID是表test_sequence的主键）</span><br><span class="line">BEGIN</span><br><span class="line">       SELECT SEQ_TEST_SEQUENCE_ID.nextval into:new.ID from dual;  --从SEQ_TEST_SEQUENCE_ID序列中获取数据当做new.ID 的值</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这样数据插入时就不需要给id字段赋值了</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot项目配置swagger</title>
    <url>/2023/03/02/spring-boot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AEswagger/</url>
    <content><![CDATA[<p>先在pom文件中引入jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- knife4j --&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.3&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>然后在yml中配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">knife4j:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<p>在项目中加入SwaggerConfig.java配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hk.framework.config;</span><br><span class="line"></span><br><span class="line">import io.swagger.annotations.ApiOperation;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line">import springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line">import springfox.documentation.service.ApiInfo;</span><br><span class="line">import springfox.documentation.service.Contact;</span><br><span class="line">import springfox.documentation.spi.DocumentationType;</span><br><span class="line">import springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Swagger2的接口配置</span><br><span class="line"> *</span><br><span class="line"> * @author hk</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line">    // 创建Docket存入容器，Docket代表一个接口文档</span><br><span class="line">    @Bean</span><br><span class="line">    public Docket webApiConfig() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                // 创建接口文档的具体信息</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                // 创建选择器，控制哪些接口被加入文档</span><br><span class="line">                .select()</span><br><span class="line">                // 指定@ApiOperation标注的接口被加入文档</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 创建接口文档的具体信息，会显示在接口文档页面中</span><br><span class="line">    private ApiInfo webApiInfo() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                // 文档标题</span><br><span class="line">                .title(&quot;标题：用户管理系统接口文档&quot;)</span><br><span class="line">                // 文档描述</span><br><span class="line">                .description(&quot;描述：本文档描述了用户管理系统的接口定义&quot;)</span><br><span class="line">                // 版本</span><br><span class="line">                .version(&quot;1.0&quot;)</span><br><span class="line">                // 联系人信息</span><br><span class="line">                .contact(new Contact(&quot;baobao&quot;, &quot;http://baobao.com&quot;, &quot;baobao@qq.com&quot;))</span><br><span class="line">                // 版权</span><br><span class="line">                .license(&quot;baobao&quot;)</span><br><span class="line">                // 版权地址</span><br><span class="line">                .licenseUrl(&quot;http://www.baobao.com&quot;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在项目中加入SwaggerController.java文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hk.project.tool;</span><br><span class="line"></span><br><span class="line">import com.hk.common.core.controller.BaseController;</span><br><span class="line">import org.apache.shiro.authz.annotation.RequiresPermissions;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * swagger 接口</span><br><span class="line"> * </span><br><span class="line"> * @author hk</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/tool/swagger&quot;)</span><br><span class="line">public class SwaggerController extends BaseController</span><br><span class="line">&#123;</span><br><span class="line">    @RequiresPermissions(&quot;tool:swagger:view&quot;)</span><br><span class="line">    @GetMapping()</span><br><span class="line">    // 修改成knife4j前端ui访问地址doc.html</span><br><span class="line">    public String index()</span><br><span class="line">    &#123;</span><br><span class="line">        return redirect(&quot;/doc.html&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在网页菜单建一个页面，路径指向SwaggerController</p>
<img src="/2023/03/02/spring-boot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AEswagger/1.jpg" class="">

<p>swagger注释写法示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.ruoyi.project.tool.swagger;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PutMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import com.ruoyi.common.utils.StringUtils;</span><br><span class="line">import com.ruoyi.framework.web.controller.BaseController;</span><br><span class="line">import com.ruoyi.framework.web.domain.AjaxResult;</span><br><span class="line">import io.swagger.annotations.Api;</span><br><span class="line">import io.swagger.annotations.ApiImplicitParam;</span><br><span class="line">import io.swagger.annotations.ApiImplicitParams;</span><br><span class="line">import io.swagger.annotations.ApiModel;</span><br><span class="line">import io.swagger.annotations.ApiModelProperty;</span><br><span class="line">import io.swagger.annotations.ApiOperation;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * swagger 用户测试方法</span><br><span class="line"> * </span><br><span class="line"> * @author ruoyi</span><br><span class="line"> */</span><br><span class="line">@Api(&quot;用户信息管理&quot;)</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/test/user&quot;)</span><br><span class="line">public class TestController extends BaseController</span><br><span class="line">&#123;</span><br><span class="line">    private final static Map&lt;Integer, UserEntity&gt; users = new LinkedHashMap&lt;Integer, UserEntity&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        users.put(1, new UserEntity(1, &quot;admin&quot;, &quot;admin123&quot;, &quot;15888888888&quot;));</span><br><span class="line">        users.put(2, new UserEntity(2, &quot;ry&quot;, &quot;admin123&quot;, &quot;15666666666&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;获取用户列表&quot;)</span><br><span class="line">    @GetMapping(&quot;/list&quot;)</span><br><span class="line">    public AjaxResult userList()</span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;UserEntity&gt; userList = new ArrayList&lt;UserEntity&gt;(users.values());</span><br><span class="line">        return AjaxResult.success(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;获取用户详细&quot;)</span><br><span class="line">    @ApiImplicitParam(name = &quot;userId&quot;, value = &quot;用户ID&quot;, required = true, dataType = &quot;int&quot;, paramType = &quot;path&quot;, dataTypeClass = Integer.class)</span><br><span class="line">    @GetMapping(&quot;/&#123;userId&#125;&quot;)</span><br><span class="line">    public AjaxResult getUser(@PathVariable Integer userId)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!users.isEmpty() &amp;&amp; users.containsKey(userId))</span><br><span class="line">        &#123;</span><br><span class="line">            return AjaxResult.success(users.get(userId));</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            return error(&quot;用户不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;新增用户&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">        @ApiImplicitParam(name = &quot;userId&quot;, value = &quot;用户id&quot;, dataType = &quot;Integer&quot;, dataTypeClass = Integer.class),</span><br><span class="line">        @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名称&quot;, dataType = &quot;String&quot;, dataTypeClass = String.class),</span><br><span class="line">        @ApiImplicitParam(name = &quot;password&quot;, value = &quot;用户密码&quot;, dataType = &quot;String&quot;, dataTypeClass = String.class),</span><br><span class="line">        @ApiImplicitParam(name = &quot;mobile&quot;, value = &quot;用户手机&quot;, dataType = &quot;String&quot;, dataTypeClass = String.class)</span><br><span class="line">    &#125;)</span><br><span class="line">    @PostMapping(&quot;/save&quot;)</span><br><span class="line">    public AjaxResult save(UserEntity user)</span><br><span class="line">    &#123;</span><br><span class="line">        if (StringUtils.isNull(user) || StringUtils.isNull(user.getUserId()))</span><br><span class="line">        &#123;</span><br><span class="line">            return error(&quot;用户ID不能为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return AjaxResult.success(users.put(user.getUserId(), user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;更新用户&quot;)</span><br><span class="line">    @PutMapping(&quot;/update&quot;)</span><br><span class="line">    public AjaxResult update(@RequestBody UserEntity user)</span><br><span class="line">    &#123;</span><br><span class="line">        if (StringUtils.isNull(user) || StringUtils.isNull(user.getUserId()))</span><br><span class="line">        &#123;</span><br><span class="line">            return error(&quot;用户ID不能为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (users.isEmpty() || !users.containsKey(user.getUserId()))</span><br><span class="line">        &#123;</span><br><span class="line">            return error(&quot;用户不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        users.remove(user.getUserId());</span><br><span class="line">        return AjaxResult.success(users.put(user.getUserId(), user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ApiOperation(&quot;删除用户信息&quot;)</span><br><span class="line">    @ApiImplicitParam(name = &quot;userId&quot;, value = &quot;用户ID&quot;, required = true, dataType = &quot;int&quot;, paramType = &quot;path&quot;, dataTypeClass = Integer.class)</span><br><span class="line">    @DeleteMapping(&quot;/&#123;userId&#125;&quot;)</span><br><span class="line">    public AjaxResult delete(@PathVariable Integer userId)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!users.isEmpty() &amp;&amp; users.containsKey(userId))</span><br><span class="line">        &#123;</span><br><span class="line">            users.remove(userId);</span><br><span class="line">            return success();</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            return error(&quot;用户不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@ApiModel(value = &quot;UserEntity&quot;, description = &quot;用户实体&quot;)</span><br><span class="line">class UserEntity</span><br><span class="line">&#123;</span><br><span class="line">    @ApiModelProperty(&quot;用户ID&quot;)</span><br><span class="line">    private Integer userId;</span><br><span class="line"></span><br><span class="line">    @ApiModelProperty(&quot;用户名称&quot;)</span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    @ApiModelProperty(&quot;用户密码&quot;)</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    @ApiModelProperty(&quot;用户手机&quot;)</span><br><span class="line">    private String mobile;</span><br><span class="line"></span><br><span class="line">    public UserEntity()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public UserEntity(Integer userId, String username, String password, String mobile)</span><br><span class="line">    &#123;</span><br><span class="line">        this.userId = userId;</span><br><span class="line">        this.username = username;</span><br><span class="line">        this.password = password;</span><br><span class="line">        this.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getUserId()</span><br><span class="line">    &#123;</span><br><span class="line">        return userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserId(Integer userId)</span><br><span class="line">    &#123;</span><br><span class="line">        this.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUsername()</span><br><span class="line">    &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username)</span><br><span class="line">    &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword()</span><br><span class="line">    &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password)</span><br><span class="line">    &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMobile()</span><br><span class="line">    &#123;</span><br><span class="line">        return mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMobile(String mobile)</span><br><span class="line">    &#123;</span><br><span class="line">        this.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>若依框架</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot maven项目打成jar包</title>
    <url>/2022/11/18/spring-boot-maven%E9%A1%B9%E7%9B%AE%E6%89%93%E6%88%90jar%E5%8C%85/</url>
    <content><![CDATA[<p>千万不要用Intellij idea来打包项目为Jar，你应该来到项目的根目录，然后用  mvn clean package 这个命令来打包</p>
<p>然后在target目录下，可以得到jar文件</p>
<p>在target目录中通过cmd进入命令窗口，然后执行java -jar XXX.jar 命令即可启动项目</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>项目部署</tag>
      </tags>
  </entry>
  <entry>
    <title>一些表单校验规则</title>
    <url>/2023/03/14/%E4%B8%80%E4%BA%9B%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h4 id="身份证"><a href="#身份证" class="headerlink" title="身份证"></a>身份证</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">IDCard</span>: &#123;</span><br><span class="line">    <span class="attr">validator</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    	<span class="keyword">var</span> reg =<span class="regexp">/^([1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$)/</span>;</span><br><span class="line">        <span class="keyword">return</span> reg.<span class="title function_">test</span>(value);    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;身份证输入不合法&#x27;</span>   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">RealNumber</span>: &#123;</span><br><span class="line">    <span class="attr">validator</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    	<span class="keyword">var</span> reg =<span class="regexp">/^(?:[1-9]\d*|0)(?:\.\d+)?$/</span>;</span><br><span class="line">        <span class="keyword">return</span> reg.<span class="title function_">test</span>(value);    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;数字输入不合法&#x27;</span>   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="正整数"><a href="#正整数" class="headerlink" title="正整数"></a>正整数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">IntNumber</span>: &#123;</span><br><span class="line">    <span class="attr">validator</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    	<span class="keyword">var</span> reg =<span class="regexp">/^[1-9]\d*$/</span>;</span><br><span class="line">        <span class="keyword">return</span> reg.<span class="title function_">test</span>(value);    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;数字输入不合法&#x27;</span>   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="包含零的正整数"><a href="#包含零的正整数" class="headerlink" title="包含零的正整数"></a>包含零的正整数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ZeroNumber</span>: &#123;</span><br><span class="line">    <span class="attr">validator</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    	<span class="keyword">var</span> reg =<span class="regexp">/^([1-9]\d*|[0]&#123;1,1&#125;)$/</span>;</span><br><span class="line">        <span class="keyword">return</span> reg.<span class="title function_">test</span>(value);    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;数字输入不合法&#x27;</span>   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="包含零的复数"><a href="#包含零的复数" class="headerlink" title="包含零的复数"></a>包含零的复数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NumberZero</span>: &#123;</span><br><span class="line">	<span class="attr">validator</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    	<span class="keyword">var</span> reg =<span class="regexp">/^((-\d+)|(0+))$/</span>;</span><br><span class="line">        <span class="keyword">return</span> reg.<span class="title function_">test</span>(value);    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;只能输入负数和0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="联系方式验证，兼容手机号和座机号"><a href="#联系方式验证，兼容手机号和座机号" class="headerlink" title="联系方式验证，兼容手机号和座机号"></a>联系方式验证，兼容手机号和座机号</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="property">validator</span>.<span class="title function_">addMethod</span>(<span class="string">&quot;isLxfs&quot;</span>,<span class="keyword">function</span>(<span class="params">value,element</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> tel = <span class="regexp">/^(0\d&#123;2,3&#125;-)?\d&#123;7,8&#125;$/g</span>;<span class="comment">//区号3,4位,号码7,8位</span></span><br><span class="line">	<span class="keyword">var</span> length = value.<span class="property">length</span>;</span><br><span class="line">	<span class="keyword">var</span> phone=<span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">optional</span>(element) || (tel.<span class="title function_">test</span>(value))||(length == <span class="number">11</span> &amp;&amp; phone.<span class="title function_">test</span>(value));</span><br><span class="line">&#125;,<span class="string">&quot;请填写正确的手机号码或座机号&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="校验出生日期"><a href="#校验出生日期" class="headerlink" title="校验出生日期"></a>校验出生日期</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="property">validator</span>.<span class="title function_">addMethod</span>(<span class="string">&quot;isBirth&quot;</span>,<span class="keyword">function</span>(<span class="params">value,element</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> birth = <span class="regexp">/^(19|20)\d&#123;2&#125;-(1[0-2]|0?[1-9])-(0?[1-9]|[1-2][0-9]|3[0-1])$/</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">optional</span>(element) || (birth).<span class="title function_">test</span>(value);</span><br><span class="line">&#125;,<span class="string">&quot;出生日期格式示例2000-01-01&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>一个非常严格的java身份证校验工具</title>
    <url>/2018/07/23/%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E4%B8%A5%E6%A0%BC%E7%9A%84java%E8%BA%AB%E4%BB%BD%E8%AF%81%E6%A0%A1%E9%AA%8C%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Calendar;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.GregorianCalendar;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * 类说明:身份证合法性校验</span><br><span class="line"> * &lt;/p&gt;</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * --15位身份证号码：第7、8位为出生年份(两位数)，第9、10位为出生月份，第11、12位代表出生日期，第15位代表性别，奇数为男，偶数为女。</span><br><span class="line"> * --18位身份证号码</span><br><span class="line"> * ：第7、8、9、10位为出生年份(四位数)，第11、第12位为出生月份，第13、14位代表出生日期，第17位代表性别，奇数为男，偶数为女。</span><br><span class="line"> * &lt;/p&gt;</span><br><span class="line"> */</span><br><span class="line">public class IdcardUtils &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 省，直辖市代码表： &#123; 11:&quot;北京&quot;,12:&quot;天津&quot;,13:&quot;河北&quot;,14:&quot;山西&quot;,15:&quot;内蒙古&quot;,</span><br><span class="line">     * 21:&quot;辽宁&quot;,22:&quot;吉林&quot;,23:&quot;黑龙江&quot;,31:&quot;上海&quot;,32:&quot;江苏&quot;,</span><br><span class="line">     * 33:&quot;浙江&quot;,34:&quot;安徽&quot;,35:&quot;福建&quot;,36:&quot;江西&quot;,37:&quot;山东&quot;,41:&quot;河南&quot;,</span><br><span class="line">     * 42:&quot;湖北&quot;,43:&quot;湖南&quot;,44:&quot;广东&quot;,45:&quot;广西&quot;,46:&quot;海南&quot;,50:&quot;重庆&quot;,</span><br><span class="line">     * 51:&quot;四川&quot;,52:&quot;贵州&quot;,53:&quot;云南&quot;,54:&quot;西藏&quot;,61:&quot;陕西&quot;,62:&quot;甘肃&quot;,</span><br><span class="line">     * 63:&quot;青海&quot;,64:&quot;宁夏&quot;,65:&quot;新疆&quot;,71:&quot;台湾&quot;,81:&quot;香港&quot;,82:&quot;澳门&quot;,91:&quot;国外&quot;&#125;</span><br><span class="line">     */</span><br><span class="line">    protected String codeAndCity[][] = &#123;&#123;&quot;11&quot;, &quot;北京&quot;&#125;, &#123;&quot;12&quot;, &quot;天津&quot;&#125;,</span><br><span class="line">            &#123;&quot;13&quot;, &quot;河北&quot;&#125;, &#123;&quot;14&quot;, &quot;山西&quot;&#125;, &#123;&quot;15&quot;, &quot;内蒙古&quot;&#125;, &#123;&quot;21&quot;, &quot;辽宁&quot;&#125;,</span><br><span class="line">            &#123;&quot;22&quot;, &quot;吉林&quot;&#125;, &#123;&quot;23&quot;, &quot;黑龙江&quot;&#125;, &#123;&quot;31&quot;, &quot;上海&quot;&#125;, &#123;&quot;32&quot;, &quot;江苏&quot;&#125;,</span><br><span class="line">            &#123;&quot;33&quot;, &quot;浙江&quot;&#125;, &#123;&quot;34&quot;, &quot;安徽&quot;&#125;, &#123;&quot;35&quot;, &quot;福建&quot;&#125;, &#123;&quot;36&quot;, &quot;江西&quot;&#125;,</span><br><span class="line">            &#123;&quot;37&quot;, &quot;山东&quot;&#125;, &#123;&quot;41&quot;, &quot;河南&quot;&#125;, &#123;&quot;42&quot;, &quot;湖北&quot;&#125;, &#123;&quot;43&quot;, &quot;湖南&quot;&#125;,</span><br><span class="line">            &#123;&quot;44&quot;, &quot;广东&quot;&#125;, &#123;&quot;45&quot;, &quot;广西&quot;&#125;, &#123;&quot;46&quot;, &quot;海南&quot;&#125;, &#123;&quot;50&quot;, &quot;重庆&quot;&#125;,</span><br><span class="line">            &#123;&quot;51&quot;, &quot;四川&quot;&#125;, &#123;&quot;52&quot;, &quot;贵州&quot;&#125;, &#123;&quot;53&quot;, &quot;云南&quot;&#125;, &#123;&quot;54&quot;, &quot;西藏&quot;&#125;,</span><br><span class="line">            &#123;&quot;61&quot;, &quot;陕西&quot;&#125;, &#123;&quot;62&quot;, &quot;甘肃&quot;&#125;, &#123;&quot;63&quot;, &quot;青海&quot;&#125;, &#123;&quot;64&quot;, &quot;宁夏&quot;&#125;,</span><br><span class="line">            &#123;&quot;65&quot;, &quot;新疆&quot;&#125;, &#123;&quot;71&quot;, &quot;台湾&quot;&#125;, &#123;&quot;81&quot;, &quot;香港&quot;&#125;, &#123;&quot;82&quot;, &quot;澳门&quot;&#125;,</span><br><span class="line">            &#123;&quot;91&quot;, &quot;国外&quot;&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    private String cityCode[] = &#123;&quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;, &quot;21&quot;, &quot;22&quot;,</span><br><span class="line">            &quot;23&quot;, &quot;31&quot;, &quot;32&quot;, &quot;33&quot;, &quot;34&quot;, &quot;35&quot;, &quot;36&quot;, &quot;37&quot;, &quot;41&quot;, &quot;42&quot;, &quot;43&quot;,</span><br><span class="line">            &quot;44&quot;, &quot;45&quot;, &quot;46&quot;, &quot;50&quot;, &quot;51&quot;, &quot;52&quot;, &quot;53&quot;, &quot;54&quot;, &quot;61&quot;, &quot;62&quot;, &quot;63&quot;,</span><br><span class="line">            &quot;64&quot;, &quot;65&quot;, &quot;71&quot;, &quot;81&quot;, &quot;82&quot;, &quot;91&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    // 每位加权因子</span><br><span class="line">    private int power[] = &#123;7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2&#125;;</span><br><span class="line"></span><br><span class="line">    // 第18位校检码</span><br><span class="line">    private String verifyCode[] = &#123;&quot;1&quot;, &quot;0&quot;, &quot;X&quot;, &quot;9&quot;, &quot;8&quot;, &quot;7&quot;, &quot;6&quot;, &quot;5&quot;,</span><br><span class="line">            &quot;4&quot;, &quot;3&quot;, &quot;2&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证所有的身份证的合法性</span><br><span class="line">     *</span><br><span class="line">     * @param idcard</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean isValidatedAllIdcard(String idcard) &#123;</span><br><span class="line">        if (idcard.length() == 15) &#123;</span><br><span class="line">            idcard = this.convertIdcarBy15bit(idcard);</span><br><span class="line">        &#125;</span><br><span class="line">        return this.isValidate18Idcard(idcard);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 判断18位身份证的合法性</span><br><span class="line">     * &lt;/p&gt;</span><br><span class="line">     * 根据〖中华人民共和国国家标准GB11643-1999〗中有关公民身份号码的规定，公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。</span><br><span class="line">     * 排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 顺序码: 表示在同一地址码所标识的区域范围内，对同年、同月、同 日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配 给女性。</span><br><span class="line">     * &lt;/p&gt;</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 1.前1、2位数字表示：所在省份的代码； 2.第3、4位数字表示：所在城市的代码； 3.第5、6位数字表示：所在区县的代码；</span><br><span class="line">     * 4.第7~14位数字表示：出生年、月、日； 5.第15、16位数字表示：所在地的派出所的代码；</span><br><span class="line">     * 6.第17位数字表示性别：奇数表示男性，偶数表示女性；</span><br><span class="line">     * 7.第18位数字是校检码：也有的说是个人信息码，一般是随计算机的随机产生，用来检验身份证的正确性。校检码可以是0~9的数字，有时也用x表示。</span><br><span class="line">     * &lt;/p&gt;</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 第十八位数字(校验码)的计算方法为： 1.将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7 9 10 5 8 4</span><br><span class="line">     * 2 1 6 3 7 9 10 5 8 4 2</span><br><span class="line">     * &lt;/p&gt;</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 2.将这17位数字和系数相乘的结果相加。</span><br><span class="line">     * &lt;/p&gt;</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 3.用加出来和除以11，看余数是多少？</span><br><span class="line">     * &lt;/p&gt;</span><br><span class="line">     * 4.余数只可能有0 1 2 3 4 5 6 7 8 9 10这11个数字。其分别对应的最后一位身份证的号码为1 0 X 9 8 7 6 5 4 3</span><br><span class="line">     * 2。</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * 5.通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的Ⅹ。如果余数是10，身份证的最后一位号码就是2。</span><br><span class="line">     * &lt;/p&gt;</span><br><span class="line">     *</span><br><span class="line">     * @param idcard</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean isValidate18Idcard(String idcard) &#123;</span><br><span class="line">        // 非18位为假</span><br><span class="line">        if (idcard.length() != 18) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        // 获取前17位</span><br><span class="line">        String idcard17 = idcard.substring(0, 17);</span><br><span class="line">        // 获取第18位</span><br><span class="line">        String idcard18Code = idcard.substring(17, 18);</span><br><span class="line">        char c[] = null;</span><br><span class="line">        String checkCode = &quot;&quot;;</span><br><span class="line">        // 是否都为数字</span><br><span class="line">        if (isDigital(idcard17)) &#123;</span><br><span class="line">            c = idcard17.toCharArray();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (null != c) &#123;</span><br><span class="line">            int bit[] = new int[idcard17.length()];</span><br><span class="line"></span><br><span class="line">            bit = converCharToInt(c);</span><br><span class="line"></span><br><span class="line">            int sum17 = 0;</span><br><span class="line"></span><br><span class="line">            sum17 = getPowerSum(bit);</span><br><span class="line"></span><br><span class="line">            // 将和值与11取模得到余数进行校验码判断</span><br><span class="line">            checkCode = getCheckCodeBySum(sum17);</span><br><span class="line">            if (null == checkCode) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            // 将身份证的第18位与算出来的校码进行匹配，不相等就为假</span><br><span class="line">            if (!idcard18Code.equalsIgnoreCase(checkCode)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证15位身份证的合法性,该方法验证不准确，最好是将15转为18位后再判断，该类中已提供。</span><br><span class="line">     *</span><br><span class="line">     * @param idcard</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean isValidate15Idcard(String idcard) &#123;</span><br><span class="line">        // 非15位为假</span><br><span class="line">        if (idcard.length() != 15) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 是否全都为数字</span><br><span class="line">        if (isDigital(idcard)) &#123;</span><br><span class="line">            String provinceid = idcard.substring(0, 2);</span><br><span class="line">            String birthday = idcard.substring(6, 12);</span><br><span class="line">            int year = Integer.parseInt(idcard.substring(6, 8));</span><br><span class="line">            int month = Integer.parseInt(idcard.substring(8, 10));</span><br><span class="line">            int day = Integer.parseInt(idcard.substring(10, 12));</span><br><span class="line"></span><br><span class="line">            // 判断是否为合法的省份</span><br><span class="line">            boolean flag = false;</span><br><span class="line">            for (String id : cityCode) &#123;</span><br><span class="line">                if (id.equals(provinceid)) &#123;</span><br><span class="line">                    flag = true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!flag) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            // 该身份证生出日期在当前日期之后时为假</span><br><span class="line">            Date birthdate = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                birthdate = new SimpleDateFormat(&quot;yyMMdd&quot;).parse(birthday);</span><br><span class="line">            &#125; catch (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            if (birthdate == null || new Date().before(birthdate)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 判断是否为合法的年份</span><br><span class="line">            GregorianCalendar curDay = new GregorianCalendar();</span><br><span class="line">            int curYear = curDay.get(Calendar.YEAR);</span><br><span class="line">            int year2bit = Integer.parseInt(String.valueOf(curYear)</span><br><span class="line">                    .substring(2));</span><br><span class="line"></span><br><span class="line">            // 判断该年份的两位表示法，小于50的和大于当前年份的，为假</span><br><span class="line">            if ((year &lt; 50 &amp;&amp; year &gt; year2bit)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 判断是否为合法的月份</span><br><span class="line">            if (month &lt; 1 || month &gt; 12) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 判断是否为合法的日期</span><br><span class="line">            boolean mflag = false;</span><br><span class="line">            curDay.setTime(birthdate); // 将该身份证的出生日期赋于对象curDay</span><br><span class="line">            switch (month) &#123;</span><br><span class="line">                case 1:</span><br><span class="line">                case 3:</span><br><span class="line">                case 5:</span><br><span class="line">                case 7:</span><br><span class="line">                case 8:</span><br><span class="line">                case 10:</span><br><span class="line">                case 12:</span><br><span class="line">                    mflag = (day &gt;= 1 &amp;&amp; day &lt;= 31);</span><br><span class="line">                    break;</span><br><span class="line">                case 2: // 公历的2月非闰年有28天,闰年的2月是29天。</span><br><span class="line">                    if (curDay.isLeapYear(curDay.get(Calendar.YEAR))) &#123;</span><br><span class="line">                        mflag = (day &gt;= 1 &amp;&amp; day &lt;= 29);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        mflag = (day &gt;= 1 &amp;&amp; day &lt;= 28);</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                case 4:</span><br><span class="line">                case 6:</span><br><span class="line">                case 9:</span><br><span class="line">                case 11:</span><br><span class="line">                    mflag = (day &gt;= 1 &amp;&amp; day &lt;= 30);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            if (!mflag) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将15位的身份证转成18位身份证</span><br><span class="line">     *</span><br><span class="line">     * @param idcard</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String convertIdcarBy15bit(String idcard) &#123;</span><br><span class="line">        String idcard17 = null;</span><br><span class="line">        // 非15位身份证</span><br><span class="line">        if (idcard.length() != 15) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (isDigital(idcard)) &#123;</span><br><span class="line">            // 获取出生年月日</span><br><span class="line">            String birthday = idcard.substring(6, 12);</span><br><span class="line">            Date birthdate = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                birthdate = new SimpleDateFormat(&quot;yyMMdd&quot;).parse(birthday);</span><br><span class="line">            &#125; catch (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            Calendar cday = Calendar.getInstance();</span><br><span class="line">            cday.setTime(birthdate);</span><br><span class="line">            String year = String.valueOf(cday.get(Calendar.YEAR));</span><br><span class="line"></span><br><span class="line">            idcard17 = idcard.substring(0, 6) + year + idcard.substring(8);</span><br><span class="line"></span><br><span class="line">            char c[] = idcard17.toCharArray();</span><br><span class="line">            String checkCode = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">            if (null != c) &#123;</span><br><span class="line">                int bit[] = new int[idcard17.length()];</span><br><span class="line"></span><br><span class="line">                // 将字符数组转为整型数组</span><br><span class="line">                bit = converCharToInt(c);</span><br><span class="line">                int sum17 = 0;</span><br><span class="line">                sum17 = getPowerSum(bit);</span><br><span class="line"></span><br><span class="line">                // 获取和值与11取模得到余数进行校验码</span><br><span class="line">                checkCode = getCheckCodeBySum(sum17);</span><br><span class="line">                // 获取不到校验位</span><br><span class="line">                if (null == checkCode) &#123;</span><br><span class="line">                    return null;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 将前17位与第18位校验码拼接</span><br><span class="line">                idcard17 += checkCode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123; // 身份证包含数字</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return idcard17;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 15位和18位身份证号码的基本数字和位数验校</span><br><span class="line">     *</span><br><span class="line">     * @param idcard</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean isIdcard(String idcard) &#123;</span><br><span class="line">        return idcard == null || &quot;&quot;.equals(idcard) ? false : Pattern.matches(</span><br><span class="line">                &quot;(^\\d&#123;15&#125;$)|(\\d&#123;17&#125;(?:\\d|x|X)$)&quot;, idcard);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 15位身份证号码的基本数字和位数验校</span><br><span class="line">     *</span><br><span class="line">     * @param idcard</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean is15Idcard(String idcard) &#123;</span><br><span class="line">        return idcard == null || &quot;&quot;.equals(idcard) ? false : Pattern.matches(</span><br><span class="line">                &quot;^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$&quot;,</span><br><span class="line">                idcard);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 18位身份证号码的基本数字和位数验校</span><br><span class="line">     *</span><br><span class="line">     * @param idcard</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean is18Idcard(String idcard) &#123;</span><br><span class="line">        return Pattern</span><br><span class="line">                .matches(</span><br><span class="line">                        &quot;^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;([\\d|x|X]&#123;1&#125;)$&quot;,</span><br><span class="line">                        idcard);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 数字验证</span><br><span class="line">     *</span><br><span class="line">     * @param str</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean isDigital(String str) &#123;</span><br><span class="line">        return str == null || &quot;&quot;.equals(str) ? false : str.matches(&quot;^[0-9]*$&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将身份证的每位和对应位的加权因子相乘之后，再得到和值</span><br><span class="line">     *</span><br><span class="line">     * @param bit</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public int getPowerSum(int[] bit) &#123;</span><br><span class="line"></span><br><span class="line">        int sum = 0;</span><br><span class="line"></span><br><span class="line">        if (power.length != bit.length) &#123;</span><br><span class="line">            return sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; bit.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; power.length; j++) &#123;</span><br><span class="line">                if (i == j) &#123;</span><br><span class="line">                    sum = sum + bit[i] * power[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将和值与11取模得到余数进行校验码判断</span><br><span class="line">     *</span><br><span class="line">     * @param sum17</span><br><span class="line">     * @return 校验位</span><br><span class="line">     */</span><br><span class="line">    public String getCheckCodeBySum(int sum17) &#123;</span><br><span class="line">        String checkCode = null;</span><br><span class="line">        switch (sum17 % 11) &#123;</span><br><span class="line">            case 10:</span><br><span class="line">                checkCode = &quot;2&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 9:</span><br><span class="line">                checkCode = &quot;3&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 8:</span><br><span class="line">                checkCode = &quot;4&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 7:</span><br><span class="line">                checkCode = &quot;5&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 6:</span><br><span class="line">                checkCode = &quot;6&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 5:</span><br><span class="line">                checkCode = &quot;7&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                checkCode = &quot;8&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                checkCode = &quot;9&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                checkCode = &quot;x&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 1:</span><br><span class="line">                checkCode = &quot;0&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 0:</span><br><span class="line">                checkCode = &quot;1&quot;;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return checkCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将字符数组转为整型数组</span><br><span class="line">     *</span><br><span class="line">     * @param c</span><br><span class="line">     * @return</span><br><span class="line">     * @throws NumberFormatException</span><br><span class="line">     */</span><br><span class="line">    public int[] converCharToInt(char[] c) throws NumberFormatException &#123;</span><br><span class="line">        int[] a = new int[c.length];</span><br><span class="line">        int k = 0;</span><br><span class="line">        for (char temp : c) &#123;</span><br><span class="line">            a[k++] = Integer.parseInt(String.valueOf(temp));</span><br><span class="line">        &#125;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>web项目启动提示class path resource does not exist（eclipse构建classes）</title>
    <url>/2019/11/22/web%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%8F%90%E7%A4%BAclass-path-resource-does-not-exist%EF%BC%88eclipse%E6%9E%84%E5%BB%BAclasses%EF%BC%89/</url>
    <content><![CDATA[<p>今天想搭建一个web工程，参考以前项目的结构，配置文件一般都会放到conf文件夹中，conf与src是同级的关系。刚开始只是建了一个conf，把配置文件丢进去了，部署到tomcat时却提示class path resource [config.xml] cannot be opened because it does not exist，就是说在classes中找不到config.xml。打开web-inf下的classes一看，果真是没有。为什么没有搞进来呢？后来才知道，是没有把conf弄到 build path中，只有build path中有的文件夹，编译后才会在classes中。</p>
<img src="/2019/11/22/web%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%8F%90%E7%A4%BAclass-path-resource-does-not-exist%EF%BC%88eclipse%E6%9E%84%E5%BB%BAclasses%EF%BC%89/1.jpg" class="">
]]></content>
      <categories>
        <category>开发工具配置</category>
      </categories>
      <tags>
        <tag>myEclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>在html中动态写入项目路径</title>
    <url>/2019/02/15/%E5%9C%A8html%E4%B8%AD%E5%8A%A8%E6%80%81%E5%86%99%E5%85%A5%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">	var pathName = window.document.location.pathname;</span><br><span class="line">	var projectName = pathName.substring(0, pathName.substr(1).indexOf(&#x27;/&#x27;) + 1);</span><br><span class="line">	</span><br><span class="line"> </span><br><span class="line">	var link1 = document.createElement(&#x27;link&#x27;);</span><br><span class="line">		link1.setAttribute(&#x27;type&#x27;, &#x27;text/css&#x27;);</span><br><span class="line">		link1.setAttribute(&#x27;rel&#x27;, &#x27;stylesheet&#x27;);</span><br><span class="line">		link1.setAttribute(&#x27;href&#x27;, projectName+&#x27;/modulePackage/css/main.css&#x27;);</span><br><span class="line">	var link2 = document.createElement(&#x27;link&#x27;);</span><br><span class="line">		link2.setAttribute(&#x27;type&#x27;, &#x27;text/css&#x27;);</span><br><span class="line">		link2.setAttribute(&#x27;rel&#x27;, &#x27;stylesheet&#x27;);</span><br><span class="line">		link2.setAttribute(&#x27;href&#x27;, projectName+&#x27;/modulePackage/css/icon_style.css&#x27;);</span><br><span class="line">	</span><br><span class="line">	document.head.appendChild(link1);</span><br><span class="line">	document.head.appendChild(link2);</span><br><span class="line">	</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	var pathName = window.document.location.pathname;</span><br><span class="line">	var projectName = pathName.substring(0, pathName.substr(1).indexOf(&#x27;/&#x27;) + 1);</span><br><span class="line">	</span><br><span class="line">	var script1 = &#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;&#x27;+projectName+&#x27;/modulePackage/js/jquery-1.11.3.min.js&quot;&gt;&#x27;+&#x27;&lt;&#x27;+&#x27;/script&gt;&#x27;;</span><br><span class="line">	var script2 = &#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;&#x27;+projectName+&#x27;/modulePackage/js/echarts/echarts.min.js&quot;&gt;&#x27;+&#x27;&lt;&#x27;+&#x27;/script&gt;&#x27;;</span><br><span class="line">	var script3 = &#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;&#x27;+projectName+&#x27;/modulePackage/js/data.js&quot;&gt;&#x27;+&#x27;&lt;&#x27;+&#x27;/script&gt;&#x27;;</span><br><span class="line">	var script4 = &#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;&#x27;+projectName+&#x27;/modulePackage/js/echarts/map/mudanjiang.js&quot;&gt;&#x27;+&#x27;&lt;&#x27;+&#x27;/script&gt;&#x27;;</span><br><span class="line">	var script5 = &#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;&#x27;+projectName+&#x27;/modulePackage/js/function.js&quot;&gt;&#x27;+&#x27;&lt;&#x27;+&#x27;/script&gt;&#x27;;</span><br><span class="line">	var script6 = &#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;&#x27;+projectName+&#x27;/modulePackage/js/initSet.js&quot;&gt;&#x27;+&#x27;&lt;&#x27;+&#x27;/script&gt;&#x27;;</span><br><span class="line">	var script7 = &#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;&#x27;+projectName+&#x27;/modulePackage/js/chartsInit.js&quot;&gt;&#x27;+&#x27;&lt;&#x27;+&#x27;/script&gt;&#x27;;</span><br><span class="line">	var script8 = &#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;&#x27;+projectName+&#x27;/modulePackage/js/setData.js&quot;&gt;&#x27;+&#x27;&lt;&#x27;+&#x27;/script&gt;&#x27;;</span><br><span class="line">	var script6 = &#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;&#x27;+projectName+&#x27;/modulePackage/js/initSet.js&quot;&gt;&#x27;+&#x27;&lt;&#x27;+&#x27;/script&gt;&#x27;;</span><br><span class="line"> </span><br><span class="line">	document.write(script1,script2,script3,script4,script5,script6,script7,script8);</span><br><span class="line"> </span><br><span class="line">	/*function getRootPath() &#123;</span><br><span class="line">	    //获取当前网址，如： http://localhost:8083/uimcardprj/share/meun.jsp</span><br><span class="line">	    var curWwwPath = window.document.location.href;</span><br><span class="line">	    //获取主机地址之后的目录，如： uimcardprj/share/meun.jsp</span><br><span class="line">	    var pathName = window.document.location.pathname;</span><br><span class="line">	    var pos = curWwwPath.indexOf(pathName);</span><br><span class="line">	    //获取主机地址，如： http://localhost:8083</span><br><span class="line">	    var localhostPaht = curWwwPath.substring(0, pos);</span><br><span class="line">	    //获取带&quot;/&quot;的项目名，如：/uimcardprj</span><br><span class="line">	    var projectName = pathName.substring(0, pathName.substr(1).indexOf(&#x27;/&#x27;) + 1);</span><br><span class="line">	    return (projectName);</span><br><span class="line">	&#125;*/</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>
<p>通过document向html写入字符串形式动态赋值项目名。但是这种方法意义不大，因为在刷新页面时css需要重新生成，页面会先掉样式然后再加载，效果不理想。</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>二维码生成工具类</title>
    <url>/2021/10/26/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import java.awt.BasicStroke;</span><br><span class="line">import java.awt.Color;</span><br><span class="line">import java.awt.Font;</span><br><span class="line">import java.awt.Graphics;</span><br><span class="line">import java.awt.Graphics2D;</span><br><span class="line">import java.awt.Image;</span><br><span class="line">import java.awt.Shape;</span><br><span class="line">import java.awt.geom.RoundRectangle2D;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Hashtable;</span><br><span class="line">import java.util.List;</span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import com.google.zxing.BarcodeFormat;</span><br><span class="line">import com.google.zxing.BinaryBitmap;</span><br><span class="line">import com.google.zxing.DecodeHintType;</span><br><span class="line">import com.google.zxing.EncodeHintType;</span><br><span class="line">import com.google.zxing.MultiFormatReader;</span><br><span class="line">import com.google.zxing.MultiFormatWriter;</span><br><span class="line">import com.google.zxing.Result;</span><br><span class="line">import com.google.zxing.client.j2se.BufferedImageLuminanceSource;</span><br><span class="line">import com.google.zxing.common.BitMatrix;</span><br><span class="line">import com.google.zxing.common.HybridBinarizer;</span><br><span class="line">import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"></span><br><span class="line">public class QrCodeUtil &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">        String backgroundPath = &quot;d:\\tt\\kola.jpg&quot;;</span><br><span class="line">        String qrCodePath = &quot;D:\\tt\\t11.png&quot;;</span><br><span class="line">        String photoPath =&quot;D:\\new1.jpg&quot;;</span><br><span class="line">        String message02 = &quot;持证人 张三&quot;;</span><br><span class="line">        String outPutPath=&quot;d:\\tt\\99.jpg&quot;;</span><br><span class="line">        overlapImage(backgroundPath,qrCodePath,photoPath,message02,outPutPath);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	public static String overlapImage(String backgroundPath,String qrCodePath,String photoPath,String message02,String outPutPath)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //设置图片大小</span><br><span class="line">//            BufferedImage background = resizeImage(618,1000, ImageIO.read(new File(&quot;这里是背景图片的路径！&quot;)));</span><br><span class="line">            BufferedImage background = resizeImage(640,960, ImageIO.read(new File(backgroundPath)));</span><br><span class="line">//            BufferedImage qrCode = resizeImage(150,150,ImageIO.read(new File(&quot;这里是插入二维码图片的路径！&quot;)));</span><br><span class="line">            BufferedImage qrCode = resizeImage(210,210,ImageIO.read(new File(qrCodePath)));</span><br><span class="line">            </span><br><span class="line">            BufferedImage  photo= resizeImage(194,260,ImageIO.read(new File(photoPath)));</span><br><span class="line">            //在背景图片中添加入需要写入的信息，例如：扫描下方二维码，欢迎大家添加我的淘宝返利机器人，居家必备，省钱购物专属小秘书！</span><br><span class="line">            //String message = &quot;扫描下方二维码，欢迎大家添加我的淘宝返利机器人，居家必备，省钱购物专属小秘书！&quot;;</span><br><span class="line">            Graphics2D g = background.createGraphics();</span><br><span class="line">            g.setColor(Color.black);</span><br><span class="line">            g.setFont(new Font(&quot;微软雅黑&quot;,Font.BOLD,20));</span><br><span class="line">            //g.drawString(message01,530 ,190);</span><br><span class="line">            g.drawString(message02,265 ,710);</span><br><span class="line">            //在背景图片上添加二维码图片</span><br><span class="line">            g.drawImage(qrCode, 420, 750, qrCode.getWidth(), qrCode.getHeight(), null);</span><br><span class="line">            //在背景图上添加头像</span><br><span class="line">            g.drawImage(photo, 230, 400, photo.getWidth(), photo.getHeight(), null);</span><br><span class="line">            g.dispose();</span><br><span class="line">//            ImageIO.write(background, &quot;jpg&quot;, new File(&quot;这里是一个输出图片的路径&quot;));</span><br><span class="line">            ImageIO.write(background, &quot;jpg&quot;, new File(outPutPath));</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	private static final String CHARSET = &quot;utf-8&quot;;</span><br><span class="line">    private static final String FORMAT_NAME = &quot;JPG&quot;;</span><br><span class="line">    // 二维码尺寸</span><br><span class="line">    private static final int QRCODE_SIZE = 105;</span><br><span class="line">    // LOGO宽度</span><br><span class="line">    private static final int WIDTH = 30;</span><br><span class="line">    // LOGO高度</span><br><span class="line">    private static final int HEIGHT = 30;</span><br><span class="line">	</span><br><span class="line">	public static BufferedImage overlapImage(String backgroundPath,BufferedImage qrCode,String message)&#123;</span><br><span class="line">		BufferedImage background = null;</span><br><span class="line">		try &#123;</span><br><span class="line">            //设置图片大小</span><br><span class="line">            background = resizeImage(320,320, ImageIO.read(new File(backgroundPath)));</span><br><span class="line">            Graphics2D g = background.createGraphics();</span><br><span class="line">            //设置文字颜色</span><br><span class="line">            g.setColor(new Color(27,34,140));</span><br><span class="line">            g.setFont(new Font(&quot;黑体&quot;,Font.BOLD,12));</span><br><span class="line">            //文字自动折行</span><br><span class="line">            List&lt;String&gt; messageList = new ArrayList&lt;String&gt;(); </span><br><span class="line">            int zhKey = 19; </span><br><span class="line">            while(message.length()&gt;=zhKey)&#123;</span><br><span class="line">            	messageList.add(message.substring(0,zhKey));</span><br><span class="line">            	message = message.substring(zhKey,message.length());</span><br><span class="line">            &#125;</span><br><span class="line">            messageList.add(message);</span><br><span class="line">            for(int i=0;i&lt;messageList.size();i++)&#123;</span><br><span class="line">            	 g.drawString(messageList.get(i),55 ,280+i*16);</span><br><span class="line">            &#125;</span><br><span class="line">            //在背景图片上添加二维码</span><br><span class="line">            g.drawImage(qrCode, 110, 62, qrCode.getWidth(), qrCode.getHeight(), null);</span><br><span class="line">            g.dispose();</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return background;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static BufferedImage resizeImage(int x, int y, BufferedImage bfi)&#123;</span><br><span class="line">        BufferedImage bufferedImage = new BufferedImage(x, y, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        bufferedImage.getGraphics().drawImage(</span><br><span class="line">                bfi.getScaledInstance(x, y, Image.SCALE_SMOOTH), 0, 0, null);</span><br><span class="line">        return bufferedImage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @SuppressWarnings(&#123;&quot;unchecked&quot;,&quot;rawtypes&quot;&#125;)</span><br><span class="line">	private static BufferedImage createImage(String content, String imgPath, boolean needCompress) throws Exception &#123;</span><br><span class="line">		Hashtable hints = new Hashtable();</span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        hints.put(EncodeHintType.MARGIN, 1);</span><br><span class="line">        BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, QRCODE_SIZE, QRCODE_SIZE,</span><br><span class="line">                hints);</span><br><span class="line">        int width = bitMatrix.getWidth();</span><br><span class="line">        int height = bitMatrix.getHeight();</span><br><span class="line">        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        for (int x = 0; x &lt; width; x++) &#123;</span><br><span class="line">            for (int y = 0; y &lt; height; y++) &#123;</span><br><span class="line">            	//二维码控制颜色</span><br><span class="line">                image.setRGB(x, y, bitMatrix.get(x, y) ? 0xFF1B228C : 0xFFFFFFFF);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (imgPath == null || &quot;&quot;.equals(imgPath)) &#123;</span><br><span class="line">            return image;</span><br><span class="line">        &#125;</span><br><span class="line">        // 插入图片</span><br><span class="line">        QrCodeUtil.insertImage(image, imgPath, needCompress);</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void insertImage(BufferedImage source, String imgPath, boolean needCompress) throws Exception &#123;</span><br><span class="line">        File file = new File(imgPath);</span><br><span class="line">        if (!file.exists()) &#123;</span><br><span class="line">            System.err.println(&quot;&quot; + imgPath + &quot;   该文件不存在！&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Image src = ImageIO.read(new File(imgPath));</span><br><span class="line">        int width = src.getWidth(null);</span><br><span class="line">        int height = src.getHeight(null);</span><br><span class="line">        if (needCompress) &#123; // 压缩LOGO</span><br><span class="line">            if (width &gt; WIDTH) &#123;</span><br><span class="line">                width = WIDTH;</span><br><span class="line">            &#125;</span><br><span class="line">            if (height &gt; HEIGHT) &#123;</span><br><span class="line">                height = HEIGHT;</span><br><span class="line">            &#125;</span><br><span class="line">            Image image = src.getScaledInstance(width, height, Image.SCALE_SMOOTH);</span><br><span class="line">            BufferedImage tag = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            Graphics g = tag.getGraphics();</span><br><span class="line">            g.drawImage(image, 0, 0, null); // 绘制缩小后的图</span><br><span class="line">            g.dispose();</span><br><span class="line">            src = image;</span><br><span class="line">        &#125;</span><br><span class="line">        // 插入LOGO</span><br><span class="line">        Graphics2D graph = source.createGraphics();</span><br><span class="line">        int x = (QRCODE_SIZE - width) / 2;</span><br><span class="line">        int y = (QRCODE_SIZE - height) / 2;</span><br><span class="line">        graph.drawImage(src, x, y, width, height, null);</span><br><span class="line">        Shape shape = new RoundRectangle2D.Float(x, y, width, width, 6, 6);</span><br><span class="line">        graph.setStroke(new BasicStroke(3f));</span><br><span class="line">        graph.draw(shape);</span><br><span class="line">        graph.dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void encode(String content, String imgPath, String destPath, boolean needCompress) throws Exception &#123;</span><br><span class="line">        BufferedImage image = QrCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        mkdirs(destPath);</span><br><span class="line">        // String file = new Random().nextInt(99999999)+&quot;.jpg&quot;;</span><br><span class="line">        // ImageIO.write(image, FORMAT_NAME, new File(destPath+&quot;/&quot;+file));</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, new File(destPath));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static BufferedImage encode(String content, String imgPath, boolean needCompress) throws Exception &#123;</span><br><span class="line">        BufferedImage image = QrCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void mkdirs(String destPath) &#123;</span><br><span class="line">        File file = new File(destPath);</span><br><span class="line">        // 当文件夹不存在时，mkdirs会自动创建多层目录，区别于mkdir．(mkdir如果父目录不存在则会抛出异常)</span><br><span class="line">        if (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void encode(String content, String imgPath, String destPath) throws Exception &#123;</span><br><span class="line">    	QrCodeUtil.encode(content, imgPath, destPath, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void encode(String content, String destPath) throws Exception &#123;</span><br><span class="line">    	QrCodeUtil.encode(content, null, destPath, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void encode(String content, String imgPath, OutputStream output, boolean needCompress)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        BufferedImage image = QrCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void encode(String content, OutputStream output) throws Exception &#123;</span><br><span class="line">    	QrCodeUtil.encode(content, null, output, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">	public static String decode(File file) throws Exception &#123;</span><br><span class="line">        BufferedImage image;</span><br><span class="line">        image = ImageIO.read(file);</span><br><span class="line">        if (image == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedImageLuminanceSource source = new BufferedImageLuminanceSource(image);</span><br><span class="line">        BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));</span><br><span class="line">        Result result;</span><br><span class="line">        Hashtable hints = new Hashtable();</span><br><span class="line">        hints.put(DecodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        result = new MultiFormatReader().decode(bitmap, hints);</span><br><span class="line">        String resultStr = result.getText();</span><br><span class="line">        return resultStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String decode(String path) throws Exception &#123;</span><br><span class="line">        return QrCodeUtil.decode(new File(path));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<font size=4>
需要引入goole的zxing jar包
</font>

<p><a href="zxing.jar" title="jar包">点击下载</a></p>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>基于若依的summernote富文本编辑器上传视频功能</title>
    <url>/2023/11/06/%E5%9F%BA%E4%BA%8E%E8%8B%A5%E4%BE%9D%E7%9A%84summernote%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>原框架只支持视频链接上传，局限性比较大，不能上传本地的视频，所以对summernote视频功能进行扩展</p>
<p>修改summernote.js文件</p>
<ul>
<li><h2 id="在-callbacks-里增加一个"><a href="#在-callbacks-里增加一个" class="headerlink" title="在 callbacks 里增加一个"></a>在 callbacks 里增加一个</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onFileUpload: null,</span><br></pre></td></tr></table></figure>
<img src="/2023/11/06/%E5%9F%BA%E4%BA%8E%E8%8B%A5%E4%BE%9D%E7%9A%84summernote%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E5%8A%9F%E8%83%BD/1.png" class="">

</li>
<li><h2 id="在video方法里面增加"><a href="#在video方法里面增加" class="headerlink" title="在video方法里面增加"></a>在video方法里面增加</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attachment: &#x27;Attachment&#x27;, </span><br></pre></td></tr></table></figure>
<p>后面的值就是页面上显示的名称 这里可以自己改。 </p>
<img src="/2023/11/06/%E5%9F%BA%E4%BA%8E%E8%8B%A5%E4%BE%9D%E7%9A%84summernote%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E5%8A%9F%E8%83%BD/2.jpg" class="">
</li>
<li><h2 id="在showVideoDialog方法里增加三段代码"><a href="#在showVideoDialog方法里增加三段代码" class="headerlink" title="在showVideoDialog方法里增加三段代码"></a>在showVideoDialog方法里增加三段代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var $videoAttachment = _this2.$dialog.find(&#x27;.note-video-attachment&#x27;);</span><br><span class="line">var callbacks = _this2.options.callbacks;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$videoAttachment.off(&#x27;change&#x27;);</span><br><span class="line">$videoAttachment.on(&#x27;change&#x27;, function (event) &#123;</span><br><span class="line">  if (callbacks.onFileUpload) &#123;</span><br><span class="line">    console.log(event.target.files);</span><br><span class="line">    _this2.context.triggerEvent(&#x27;file.upload&#x27;,event.target.files);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_this2.bindEnterKey($videoAttachment,$videoBtn);</span><br></pre></td></tr></table></figure>
<img src="/2023/11/06/%E5%9F%BA%E4%BA%8E%E8%8B%A5%E4%BE%9D%E7%9A%84summernote%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E5%8A%9F%E8%83%BD/3.jpg" class="">

<ul>
<li><h2 id="在VideoDialog-initialize方法里增加页面按钮代码"><a href="#在VideoDialog-initialize方法里增加页面按钮代码" class="headerlink" title="在VideoDialog.initialize方法里增加页面按钮代码"></a>在VideoDialog.initialize方法里增加页面按钮代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&lt;div class=&quot;form-group note-form-group&quot;&gt;&#x27;,</span><br><span class="line">	&quot;&lt;label class=\&quot;note-form-label\&quot;&gt;&quot; + this.lang.video.attachment + &quot;&lt;/label&gt;&quot;,</span><br><span class="line">	&#x27;&lt;input class=&quot;note-video-attachment form-control note-form-control note-input&quot; type=&quot;file&quot; /&gt;&#x27;,</span><br><span class="line">&#x27;&lt;/div&gt;&#x27;,</span><br></pre></td></tr></table></figure>
<img src="/2023/11/06/%E5%9F%BA%E4%BA%8E%E8%8B%A5%E4%BE%9D%E7%9A%84summernote%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E5%8A%9F%E8%83%BD/4.jpg" class=""></li>
</ul>
<p>添加好了之后，页面效果是这样的 会多一个附件上传按钮</p>
<img src="/2023/11/06/%E5%9F%BA%E4%BA%8E%E8%8B%A5%E4%BE%9D%E7%9A%84summernote%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91%E5%8A%9F%E8%83%BD/5.png" class="">
<p>这里的名字再第一步的时候可任意修改</p>
<ul>
<li><h2 id="接下来我们写页面的上传方法"><a href="#接下来我们写页面的上传方法" class="headerlink" title="接下来我们写页面的上传方法"></a>接下来我们写页面的上传方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//初始化summernote控件</span><br><span class="line">//toolbar可以屏蔽视频及图片上传功能</span><br><span class="line">$(&#x27;.summernote&#x27;).summernote(&#123;</span><br><span class="line">	placeholder: &#x27;请输入公告内容&#x27;,</span><br><span class="line">	height : 220,</span><br><span class="line">	lang : &#x27;zh-CN&#x27;,</span><br><span class="line">	followingToolbar: false,</span><br><span class="line">	dialogsInBody: true,</span><br><span class="line">	/*toolbar: [</span><br><span class="line">		[ &#x27;style&#x27;, [ &#x27;style&#x27; ] ],</span><br><span class="line">		[ &#x27;font&#x27;, [ &#x27;bold&#x27;, &#x27;italic&#x27;, &#x27;underline&#x27;, &#x27;strikethrough&#x27;, &#x27;superscript&#x27;, &#x27;subscript&#x27;, &#x27;clear&#x27;] ],</span><br><span class="line">		[ &#x27;fontname&#x27;, [ &#x27;fontname&#x27; ] ],</span><br><span class="line">		[ &#x27;fontsize&#x27;, [ &#x27;fontsize&#x27; ] ],</span><br><span class="line">		[ &#x27;color&#x27;, [ &#x27;color&#x27; ] ],</span><br><span class="line">		[ &#x27;para&#x27;, [ &#x27;ol&#x27;, &#x27;ul&#x27;, &#x27;paragraph&#x27;, &#x27;height&#x27; ] ],</span><br><span class="line">		[ &#x27;table&#x27;, [ &#x27;table&#x27; ] ],</span><br><span class="line">		[ &#x27;insert&#x27;, [ &#x27;link&#x27;] ],</span><br><span class="line">		[ &#x27;view&#x27;, [ &#x27;undo&#x27;, &#x27;redo&#x27;, &#x27;fullscreen&#x27;, &#x27;codeview&#x27;, &#x27;help&#x27; ] ]</span><br><span class="line">	],*/</span><br><span class="line">	callbacks: &#123;</span><br><span class="line">        onImageUpload: function (files) &#123;</span><br><span class="line">            sendFile(files[0], this);</span><br><span class="line">        &#125;,</span><br><span class="line">		onFileUpload: function(files) &#123;</span><br><span class="line">			//附件上传</span><br><span class="line">			sendVideoFile(files[0], this);</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function sendVideoFile(file, obj) &#123;</span><br><span class="line">	var size = file.size;</span><br><span class="line">	if((size / 1024 / 1024) &gt; 10) &#123;</span><br><span class="line">		alert(&quot;视频大小不能超过10M...&quot;);</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">	console.log(&quot;size=&quot;+size);</span><br><span class="line">	var data = new FormData();</span><br><span class="line">	data.append(&quot;file&quot;, file);</span><br><span class="line">	$.ajax(&#123;</span><br><span class="line">		data : data,</span><br><span class="line">		type : &quot;POST&quot;,</span><br><span class="line">		url : ctx + &quot;common/upload&quot;,    // 图片上传出来的url，返回的是图片上传后的路径，http格式</span><br><span class="line">		cache : false,</span><br><span class="line">		contentType : false,</span><br><span class="line">		processData : false,</span><br><span class="line">		dataType : &quot;json&quot;,</span><br><span class="line">		success: function(data) &#123;//data是返回的hash,key之类的值，key是定义的文件名</span><br><span class="line">			$(&quot;.note-video-url&quot;).val(data.fileName);</span><br><span class="line">			//去掉插入视频禁用按钮</span><br><span class="line">			$(&quot;.note-video-btn&quot;).removeAttr(&quot;disabled&quot;);</span><br><span class="line">			/*if (result.code == web_status.SUCCESS) &#123;</span><br><span class="line">                //上传之后的url赋值到 视频地址文本框</span><br><span class="line">                $(&quot;.note-video-url&quot;).val(result.url);</span><br><span class="line">                //去掉插入视频禁用按钮</span><br><span class="line">                $(&quot;.note-video-btn&quot;).removeAttr(&quot;disabled&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $.modal.alertError(result.msg);</span><br><span class="line">            &#125;*/</span><br><span class="line">		&#125;,</span><br><span class="line">		error:function()&#123;</span><br><span class="line">			alert(&quot;视频上传失败&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>若依框架</tag>
      </tags>
  </entry>
  <entry>
    <title>用java写一个小说爬虫</title>
    <url>/2023/03/15/%E7%94%A8java%E5%86%99%E4%B8%80%E4%B8%AA%E5%B0%8F%E8%AF%B4%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>前言：很多网站都不提供小说下载，提供小说下载的网站又不一定有想要的小说，所以就想着写个爬虫程序，不过通用性很差，每个网站都要单独做一些修改，去掉一些页面格式，适配性问题以后有心情再说吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> txt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.ClientProtocolException;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.utils.HttpClientUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateNovelTxt</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">BDPATH</span> <span class="operator">=</span> <span class="string">&quot;D:/临时存储&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">XSNAME</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//第一步：获取小说的全部章节目录</span></span><br><span class="line">		createMl(<span class="string">&quot;http://www.swsk.org/xs/0/7/&quot;</span>,<span class="string">&quot;目录&quot;</span>);</span><br><span class="line">		<span class="comment">//第二步，通过章节目录网址获取内容并分章节生成txt文档</span></span><br><span class="line">		<span class="comment">//readMl(&quot;D:/临时存储&quot;,&quot;目录&quot;);</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createMl</span><span class="params">(String url,String wzKey)</span>&#123;</span><br><span class="line">		<span class="comment">//1.创建httpclient（相当于打开一个浏览器）</span></span><br><span class="line">	    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">	    <span class="comment">//2.创建get请求（相当于浏览器输入网址）</span></span><br><span class="line">	    <span class="type">HttpGet</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">	    <span class="comment">///html/0/318/737543541.html</span></span><br><span class="line">	    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">	        <span class="comment">//3.执行get请求（相当于输入网址后敲回车键）</span></span><br><span class="line">	        response = httpClient.execute(request);</span><br><span class="line">	        <span class="comment">//4.判断响应状态是否为200</span></span><br><span class="line">	        <span class="keyword">if</span>(response.getStatusLine().getStatusCode() == org.apache.http.HttpStatus.SC_OK)&#123;</span><br><span class="line">	            <span class="comment">//5.获取响应内容即页面内容</span></span><br><span class="line">	            org.apache.http.<span class="type">HttpEntity</span> <span class="variable">httpEntity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">	            <span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> org.apache.http.util.EntityUtils.toString(httpEntity, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">	            <span class="comment">//打印出来</span></span><br><span class="line">	            writeTXT(BDPATH,wzKey,html);</span><br><span class="line">	        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	            <span class="comment">//如果返回状态不是200，比如404（页面不存在）等</span></span><br><span class="line">	            System.out.println(<span class="string">&quot;返回状态不是200&quot;</span>);                </span><br><span class="line">	            System.out.println(EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">	        e.printStackTrace();</span><br><span class="line">	    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	        e.printStackTrace();</span><br><span class="line">	    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	        <span class="comment">//6.关闭</span></span><br><span class="line">	        HttpClientUtils.closeQuietly(response);</span><br><span class="line">	        HttpClientUtils.closeQuietly(httpClient);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readMl</span><span class="params">(String path,String title)</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> path+<span class="string">&quot;\\&quot;</span>+title+<span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">			<span class="type">InputStreamReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(fileName)),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">			<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(in);</span><br><span class="line">			<span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">			<span class="keyword">while</span>((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">				<span class="comment">//因为每个网站的网址都不一样，所以需要进行重新拼接</span></span><br><span class="line">				<span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> line.replace(<span class="string">&quot;&lt;dd&gt; &lt;a style=\&quot;\&quot; href=\&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">				<span class="comment">//文章网址 示例：http://www.swsk.org/xs/0/7/45761919.html</span></span><br><span class="line">				<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://www.swsk.org/&quot;</span>+res.split(<span class="string">&quot;\&quot;&gt;第&quot;</span>)[<span class="number">0</span>].trim();</span><br><span class="line">				<span class="comment">//文章标题 示例：第247章</span></span><br><span class="line">				<span class="type">String</span> <span class="variable">wzKey</span> <span class="operator">=</span> res.split(<span class="string">&quot;\&quot;&gt;&quot;</span>)[<span class="number">1</span>].replace(<span class="string">&quot;&lt;/a&gt;&lt;/dd&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">				<span class="comment">//System.out.println(wzKey);</span></span><br><span class="line">				<span class="comment">//将网页内容写入到txt中</span></span><br><span class="line">				getHtmlY(url,wzKey);</span><br><span class="line">			&#125;</span><br><span class="line">			br.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getHtmlY</span><span class="params">(String url,String wzKey)</span>&#123;</span><br><span class="line">		<span class="comment">//url示例&quot;https://www.123wx.cc/html/0/318/56111081.html&quot;</span></span><br><span class="line">		<span class="comment">//1.创建httpclient（相当于打开一个浏览器）</span></span><br><span class="line">	    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">	    <span class="comment">//2.创建get请求（相当于浏览器输入网址）</span></span><br><span class="line">	    <span class="type">HttpGet</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">	    <span class="comment">///html/0/318/737543541.html</span></span><br><span class="line">	    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">	        <span class="comment">//3.执行get请求（相当于输入网址后敲回车键）</span></span><br><span class="line">	        response = httpClient.execute(request);</span><br><span class="line">	        <span class="comment">//4.判断响应状态是否为200</span></span><br><span class="line">	        <span class="keyword">if</span>(response.getStatusLine().getStatusCode() == org.apache.http.HttpStatus.SC_OK)&#123;</span><br><span class="line">	            <span class="comment">//5.获取响应内容即页面内容</span></span><br><span class="line">	            org.apache.http.<span class="type">HttpEntity</span> <span class="variable">httpEntity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">	            <span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> org.apache.http.util.EntityUtils.toString(httpEntity, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">	            <span class="comment">//打印出来</span></span><br><span class="line">	            writeTXT(BDPATH,wzKey,html);</span><br><span class="line">	            readTxt(BDPATH,wzKey);</span><br><span class="line">	        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	            <span class="comment">//如果返回状态不是200，比如404（页面不存在）等</span></span><br><span class="line">	            System.out.println(<span class="string">&quot;返回状态不是200&quot;</span>);                </span><br><span class="line">	            System.out.println(EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">	        e.printStackTrace();</span><br><span class="line">	    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	        e.printStackTrace();</span><br><span class="line">	    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	        <span class="comment">//6.关闭</span></span><br><span class="line">	        HttpClientUtils.closeQuietly(response);</span><br><span class="line">	        HttpClientUtils.closeQuietly(httpClient);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//读取目标txt并向txt中写入文章内容</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readTxt</span><span class="params">(String path,String title)</span>&#123;</span><br><span class="line">		<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> path+<span class="string">&quot;\\&quot;</span>+title+<span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">			<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">			<span class="type">InputStreamReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">			br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(in);</span><br><span class="line">			<span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">			<span class="type">boolean</span> <span class="variable">iszj</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="type">boolean</span> <span class="variable">isContent</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">while</span>((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">				<span class="comment">//输出标题</span></span><br><span class="line">				<span class="keyword">if</span>(line.contains(<span class="string">&quot;&lt;div class=\&quot;bookname\&quot;&gt;&quot;</span>))&#123;</span><br><span class="line">					iszj = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(iszj)&#123;</span><br><span class="line">					<span class="comment">//根据获取的文章页面内容进行重新格式化拼接</span></span><br><span class="line">					<span class="keyword">if</span>(line.contains(<span class="string">&quot;&lt;h1&gt;&quot;</span>))&#123;</span><br><span class="line">						line = line.replace(<span class="string">&quot;&lt;h1&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">						line = line.replace(<span class="string">&quot;&lt;/h1&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">						System.out.println(<span class="string">&quot;开始读取-----&quot;</span>+line);</span><br><span class="line">						line = line + <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">						fileOutputStream(BDPATH,XSNAME,line);</span><br><span class="line">						iszj = <span class="literal">false</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//输出正文</span></span><br><span class="line">				<span class="keyword">if</span>(line.contains(<span class="string">&quot;&lt;div id=\&quot;content\&quot;&quot;</span>))&#123;</span><br><span class="line">					isContent = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(isContent)&#123;</span><br><span class="line">					<span class="keyword">if</span>(line.contains(<span class="string">&quot;&lt;/div&gt;&quot;</span>))&#123;</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> line;</span><br><span class="line">					<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> content.indexOf(<span class="string">&quot;&amp;emsp;&quot;</span>);<span class="comment">//获取第一个&quot;&amp;emsp;&quot;的位置3</span></span><br><span class="line">					<span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> content.substring(index+<span class="number">6</span>);</span><br><span class="line">					str1 = str1.replaceAll(<span class="string">&quot;&lt;br /&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">					str1 = str1.replace(<span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">					str1 = str1 + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">					<span class="comment">//System.out.println(str1);</span></span><br><span class="line">					fileOutputStream(BDPATH,XSNAME,str1);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			file.delete();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(br!=<span class="literal">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					br.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fileOutputStream</span><span class="params">(String path,String title,String content)</span> <span class="keyword">throws</span> IOException&#123;  </span><br><span class="line">		content = content +<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> path+<span class="string">&quot;\\&quot;</span>+title+<span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath,<span class="literal">true</span>);<span class="comment">//true表示在文件末尾追加  </span></span><br><span class="line">        fos.write(content.getBytes());  </span><br><span class="line">        fos.close();<span class="comment">//流要及时关闭  </span></span><br><span class="line">    &#125;  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTXT</span><span class="params">(String path,String title,String content)</span>&#123;</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">	        <span class="comment">// 防止文件建立或读取失败，用catch捕捉错误并打印，也可以throw</span></span><br><span class="line">	        <span class="comment">/* 写入Txt文件 */</span></span><br><span class="line">	        <span class="type">File</span> <span class="variable">writename</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);<span class="comment">// 相对路径，如果没有则要建立一个新的output。txt文件</span></span><br><span class="line">	        <span class="keyword">if</span>(!writename.exists())&#123;</span><br><span class="line">	            writename.mkdirs();</span><br><span class="line">	        &#125;</span><br><span class="line">	        writename = <span class="keyword">new</span> <span class="title class_">File</span>(path+<span class="string">&quot;\\&quot;</span>+title+<span class="string">&quot;.txt&quot;</span>);<span class="comment">// 相对路径，如果没有则要建立一个新的output。txt文件</span></span><br><span class="line">	        writename.createNewFile(); <span class="comment">// 创建新文件</span></span><br><span class="line">	        <span class="type">BufferedWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(writename));</span><br><span class="line">	        out.write(content); <span class="comment">// \r\n即为换行</span></span><br><span class="line">	        out.flush(); <span class="comment">// 把缓存区内容压入文件</span></span><br><span class="line">	        out.close(); <span class="comment">// 最后记得关闭文件</span></span><br><span class="line"></span><br><span class="line">	    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	        e.printStackTrace();</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>更改Myeclipse的jdk版本后需要更改tomcat的jdk版本</title>
    <url>/2018/08/17/%E6%9B%B4%E6%94%B9Myeclipse%E7%9A%84jdk%E7%89%88%E6%9C%AC%E5%90%8E%E9%9C%80%E8%A6%81%E6%9B%B4%E6%94%B9tomcat%E7%9A%84jdk%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<font size=4>
今天将Myeclipse的jdk版本从1.7升级到了1.8，然后启动tomcat项目就开始报错，找了好久发现原因是Myeclipse中的tomcat服务没有跟着升级jdk，现在记录一下，以备以后查看

<p>右键Myeclipse中Servers的Tomcat 8.x，在弹出界面选择Configure Server Connector，</p>
<p>然后MyEclipse–Servers–Tomcat–Tomcat 8.x–JDK，在这个界面升级tomcat的jdk版本。<br></font></p>
]]></content>
      <categories>
        <category>开发工具配置</category>
      </categories>
      <tags>
        <tag>myEclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>用idea将spring boot打成jar包</title>
    <url>/2022/11/23/%E7%94%A8idea%E5%B0%86spring-boot%E6%89%93%E6%88%90jar%E5%8C%85/</url>
    <content><![CDATA[<h2 id="简单版方法："><a href="#简单版方法：" class="headerlink" title="简单版方法："></a>简单版方法：</h2><p>在idea右侧窗口找到maven选项，右键package，选择Run Maven Build</p>
<img src="/2022/11/23/%E7%94%A8idea%E5%B0%86spring-boot%E6%89%93%E6%88%90jar%E5%8C%85/6.jpg" class="">
<p>然后在target目录下，可以得到jar文件，通过cmd进入命令窗口，然后执行java -jar XXX.jar 命令即可启动项目</p>
<h2 id="复杂版方法："><a href="#复杂版方法：" class="headerlink" title="复杂版方法："></a>复杂版方法：</h2><p>使用的项目中有其他自己写的其他jar包引用，如果直接使用使用Maven中的package打包，打包出来的只有当前的项目，运行很有可能运行不成功。</p>
<p>错误显示：部分类找不到</p>
<p>主要问题是建议打包的位置层级不够高，没有将整个项目打包。</p>
<p>操作流程<br>选择file–&gt;Project Structure</p>
<p>选择Artifcats–&gt;点击左上角‘+’号</p>
<p>选择jar–&gt;From modules with depemencies</p>
<img src="/2022/11/23/%E7%94%A8idea%E5%B0%86spring-boot%E6%89%93%E6%88%90jar%E5%8C%85/1.png" class="">
<p>选择项目中的主函数<br>最重要的一步来了：<br>下面的路径我选择到src路径底下，这样就会将src底下所有的jar包打包，如果项目简单，直接到主函数前面的位置底下也可以，但如果有引用到其他jar包建议路径尽量和我一样取大一点。</p>
<img src="/2022/11/23/%E7%94%A8idea%E5%B0%86spring-boot%E6%89%93%E6%88%90jar%E5%8C%85/2.png" class="">
<p>下面就会生成一个MANIFEST.MF的文件</p>
<img src="/2022/11/23/%E7%94%A8idea%E5%B0%86spring-boot%E6%89%93%E6%88%90jar%E5%8C%85/3.png" class="">
<p>Build -&gt; BuildArtifacts</p>
<img src="/2022/11/23/%E7%94%A8idea%E5%B0%86spring-boot%E6%89%93%E6%88%90jar%E5%8C%85/4.png" class="">
<p>选择Build Artifacts –&gt;Build</p>
<img src="/2022/11/23/%E7%94%A8idea%E5%B0%86spring-boot%E6%89%93%E6%88%90jar%E5%8C%85/5.png" class="">
<p>大功告成！</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>简单理解jQuery中$.getJSON、$.get、$.post、$.ajax用法</title>
    <url>/2019/01/17/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3jQuery%E4%B8%AD-getJSON%E3%80%81-get%E3%80%81-post%E3%80%81-ajax%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="在WEB开发中异步请求方式普遍使用，ajax技术减少程序员的工作量，也提升用户交互体验。AJAX的四种异步请求方式都能实现基本需求。"><a href="#在WEB开发中异步请求方式普遍使用，ajax技术减少程序员的工作量，也提升用户交互体验。AJAX的四种异步请求方式都能实现基本需求。" class="headerlink" title="在WEB开发中异步请求方式普遍使用，ajax技术减少程序员的工作量，也提升用户交互体验。AJAX的四种异步请求方式都能实现基本需求。"></a>在WEB开发中异步请求方式普遍使用，ajax技术减少程序员的工作量，也提升用户交互体验。AJAX的四种异步请求方式都能实现基本需求。</h2><hr>
<blockquote>
<h2 id="getJSON"><a href="#getJSON" class="headerlink" title="$.getJSON"></a>$.getJSON</h2><blockquote>
<ul>
<li>$.getJSON()是专门为ajax获取json数据而设置的，并且支持跨域调用，其语法的格式为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.getJSON(</span><br><span class="line">   url,                 //请求URL</span><br><span class="line">   [data],           //传参，可选参数</span><br><span class="line">   [callback]       //回调函数，可选参数</span><br><span class="line">);   </span><br></pre></td></tr></table></figure></li>
<li>url：string类型， 发送请求地址  </li>
<li>data ：可选参数， 待发送 Key&#x2F;value 参数 ，同get，post类型的data</li>
<li>callback ：可选参数，载入成功时回调函数，同get，post类型的callback</li>
<li>JSON是一种理想的数据传输格式，它能够很好的融合与JavaScript或其他宿主语言，并且可以被JS直接使用。使用JSON相比传统的通过 GET、POST直接发送“裸体”数据，在结构上更为合理，也更为安全。至于jQuery的getJSON()函数，只是设置了JSON参数的 ajax()函数的一个简化版本。这个函数也是可以跨域使用的，相比get()、post()有一定优势。另外这个函数可以通过把请求url写 成”myurl?callback&#x3D;X”这种格式，让程序执行回调函数X。</li>
<li>特别注意：$.getJSON是以GET方式提交数据，所以不能提交过大的数据量，可选$.post。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//——项目中的实际案例</span></span><br><span class="line">function <span class="title function_">changeAnswerShow</span><span class="params">(id)</span>&#123;</span><br><span class="line">  $.getJSON(</span><br><span class="line">          <span class="string">&quot;/legalconsult/admin/changeshowanswer&quot;</span>,&#123;id:id&#125;,　　　　<span class="comment">//URL和参数</span></span><br><span class="line">          function(data)&#123;</span><br><span class="line">           <span class="keyword">if</span>(data.error==<span class="number">0</span>)&#123;　　　　　　　　　　　　　　　　　　　　<span class="comment">//回调函数，与后台交互</span></span><br><span class="line">              showSuccessMessage(<span class="string">&quot;操作成功,正在刷新。。。。&quot;</span>);</span><br><span class="line">              setTimeout(<span class="string">&quot;window.location.reload()&quot;</span>,<span class="number">2200</span>);</span><br><span class="line">              <span class="keyword">var</span> i=$(<span class="string">&quot;td.show&quot;</span>+id+<span class="string">&quot; a i&quot;</span> );</span><br><span class="line">             <span class="keyword">if</span>(i.hasClass(<span class="string">&quot;splashy-gem_okay&quot;</span>))&#123;</span><br><span class="line">                 i.removeClass(<span class="string">&quot;splashy-gem_okay&quot;</span>).addClass(<span class="string">&quot;splashy-gem_remove&quot;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i.removeClass(<span class="string">&quot;splashy-gem_remove&quot;</span>).addClass(<span class="string">&quot;splashy-gem_okay&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             showErrorMessage(data.error);</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<h2 id="get"><a href="#get" class="headerlink" title="$.get"></a>$.get</h2><blockquote>
<ul>
<li>$.get是以GET方式实现AJAX请求，在提交短数据时可用。但基本不常用，因为$.getJSON完全满足功能需要，正如上所说，结构合理、更加安全。即便是为了提交长数据，也不会选用$.get,而是$.post。</li>
</ul>
</blockquote>
<h2 id="post"><a href="#post" class="headerlink" title="$.post"></a>$.post</h2><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$.post(</span><br><span class="line">    url,</span><br><span class="line">    [data],</span><br><span class="line">    [callback],</span><br><span class="line">    [type]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li>url：string类型，ajax请求的地址。</li>
<li>data：可选参数，object类型，发送至服务器的key&#x2F;value数据会作为QueryString附加到请求URL中。</li>
<li>callback：可选参数，function类型，当ajax返回成功时自动调用该函数。</li>
<li>type：type为请求的数据类型，可以是html,xml,json等类型，如果我们设置这个参数为：json，那么返回的格式则是json格式的，如果没有设置，就和$.get()返回的格式一样，都是字符串的。</li>
<li>这个方法和$.get()用法差不多，唯独多了一个type参数，那么这里就只介绍type参数吧，其他的参考上面$.get()的。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//实际项目案例</span></span><br><span class="line"> function <span class="title function_">changeMarkShow</span><span class="params">(id)</span>&#123;</span><br><span class="line">      $.post(</span><br><span class="line">              <span class="string">&quot;/legalconsult/admin/markquestion&quot;</span>,&#123;id:id&#125;,</span><br><span class="line">              function(data)&#123;</span><br><span class="line">                  <span class="keyword">if</span>(data.error==<span class="number">0</span>)&#123;</span><br><span class="line">                      showSuccessMessage(<span class="string">&quot;操作成功,正在刷新。。。。&quot;</span>);</span><br><span class="line">                      setTimeout(<span class="string">&quot;window.location.reload()&quot;</span>,<span class="number">2200</span>);</span><br><span class="line">                      <span class="keyword">var</span> i=$(<span class="string">&quot;td.markshow&quot;</span>+id+<span class="string">&quot; a i&quot;</span> );</span><br><span class="line">                     <span class="keyword">if</span>(i.hasClass(<span class="string">&quot;splashy-star_full&quot;</span>))&#123;</span><br><span class="line">                         i.removeClass(<span class="string">&quot;splashy-star_full&quot;</span>).addClass(<span class="string">&quot;splashy-gem_empty&quot;</span>);</span><br><span class="line">                     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                         i.removeClass(<span class="string">&quot;splashy-gem_empty&quot;</span>).addClass(<span class="string">&quot;splashy-gem_full&quot;</span>);</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                         showErrorMessage(data.error);</span><br><span class="line">                         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            <span class="string">&quot;json&quot;</span>                                             <span class="comment">//声明数据格式</span></span><br><span class="line">             );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<h2 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h2><blockquote>
<ul>
<li>$.ajax是一种常见的普通封装异步方式。</li>
</ul>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>理论知识</tag>
      </tags>
  </entry>
  <entry>
    <title>组织机构表查询各层级level</title>
    <url>/2023/01/10/%E7%BB%84%E7%BB%87%E6%9C%BA%E6%9E%84%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%90%84%E5%B1%82%E7%BA%A7level/</url>
    <content><![CDATA[<h2 id="通过表中的parentid关联的上下级数据，都可以用这种方法来查出当各个机构的层级"><a href="#通过表中的parentid关联的上下级数据，都可以用这种方法来查出当各个机构的层级" class="headerlink" title="通过表中的parentid关联的上下级数据，都可以用这种方法来查出当各个机构的层级"></a>通过表中的parentid关联的上下级数据，都可以用这种方法来查出当各个机构的层级</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT LTRIM(SYS_CONNECT_BY_PATH(sys_dept.dept_name, &#x27;-&gt;&#x27;), &#x27;-&gt;&#x27;) AS DEPT,</span><br><span class="line">       sys_dept.dept_id,</span><br><span class="line">       sys_dept.dept_name,</span><br><span class="line">       sys_dept.parent_id,</span><br><span class="line">       LEVEL</span><br><span class="line">  FROM sys_dept</span><br><span class="line"> START WITH parent_id = 0</span><br><span class="line">connect BY NOCYCLE PRIOR sys_dept.dept_id = sys_dept.parent_id</span><br></pre></td></tr></table></figure>
<p>效果展示</p>
<img src="/2023/01/10/%E7%BB%84%E7%BB%87%E6%9C%BA%E6%9E%84%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%90%84%E5%B1%82%E7%BA%A7level/1.jpg" class="">
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>若依框架整合JWT</title>
    <url>/2023/01/12/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88JWT/</url>
    <content><![CDATA[<p>若依官方文档提供了整合JWT的相关bean类<br>在此只记录遇到的问题<br>新的ShiroConfig配置文件中<br>首先放开了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/jwt/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>获取token的jwt&#x2F;login接口<br>通过这个接口可以获取到token</p>
<img src="/2023/01/12/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88JWT/1.png" class="">
<p>然后配置了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filters.put(<span class="string">&quot;jwt&quot;</span>, <span class="keyword">new</span> <span class="title class_">JwtFilter</span>());</span><br></pre></td></tr></table></figure>
<p>jwt过滤器<br>但是它只配置了&#x2F;api路径下的接口才会执行jwtFielter<br>当时就是没注意到这里，所以我手动加了&#x2F;jwt路径下的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jwt 请求单独验证</span></span><br><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/api/**&quot;</span>, <span class="string">&quot;jwt&quot;</span>);</span><br><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/jwt/**&quot;</span>, <span class="string">&quot;jwt&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>在这个配置过的路径下的接口，会执行token验证</p>
<img src="/2023/01/12/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88JWT/2.png" class="">

<p>JwtUtils中的EXPIRE_TIME字段是设置过期时间</p>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>若依框架</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Gson转换对象时空属性不存在的问题</title>
    <url>/2018/07/23/%E8%A7%A3%E5%86%B3Gson%E8%BD%AC%E6%8D%A2%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E6%97%A0%E5%80%BC%E5%88%99%E5%B1%9E%E6%80%A7%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<font size=4>
Gson g = new GsonBuilder().serializeNulls().create();

<p>这样new Gson，g.toJson()的结果空属性是显示null，而不是直接不存在<br></font></p>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>解决IDEA每次引入新项目都要重新配置Maven路径的问题</title>
    <url>/2023/02/06/%E8%A7%A3%E5%86%B3IDEA%E6%AF%8F%E6%AC%A1%E5%BC%95%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%E9%83%BD%E8%A6%81%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AEMaven%E8%B7%AF%E5%BE%84%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><strong>每次导入maven项目的时候，代码都会提示找不到jar包，这是因为项目使用了svn默认配置！其实原理很简单，因为每次配置maven路径是在项目中配的，这个修改的是相当于局部变量，所以在别的项目中不生效，所以解决思路在于配置全局变量。方法如下：</strong></p>
<ul>
<li><h2 id="进入全局设置"><a href="#进入全局设置" class="headerlink" title="进入全局设置"></a>进入全局设置</h2><ul>
<li><h3 id="首先我们需要先关闭项目"><a href="#首先我们需要先关闭项目" class="headerlink" title="首先我们需要先关闭项目"></a>首先我们需要先关闭项目</h3>  <img src="/2023/02/06/%E8%A7%A3%E5%86%B3IDEA%E6%AF%8F%E6%AC%A1%E5%BC%95%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%E9%83%BD%E8%A6%81%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AEMaven%E8%B7%AF%E5%BE%84%E7%9A%84%E9%97%AE%E9%A2%98/10.png" class=""></li>
<li><h3 id="然后点开Customize的All-setting进行配置"><a href="#然后点开Customize的All-setting进行配置" class="headerlink" title="然后点开Customize的All setting进行配置"></a>然后点开Customize的All setting进行配置</h3>  <img src="/2023/02/06/%E8%A7%A3%E5%86%B3IDEA%E6%AF%8F%E6%AC%A1%E5%BC%95%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%E9%83%BD%E8%A6%81%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AEMaven%E8%B7%AF%E5%BE%84%E7%9A%84%E9%97%AE%E9%A2%98/3.png" class=""></li>
</ul>
</li>
<li><h2 id="修改全局变量"><a href="#修改全局变量" class="headerlink" title="修改全局变量"></a>修改全局变量</h2>  <img src="/2023/02/06/%E8%A7%A3%E5%86%B3IDEA%E6%AF%8F%E6%AC%A1%E5%BC%95%E5%85%A5%E6%96%B0%E9%A1%B9%E7%9B%AE%E9%83%BD%E8%A6%81%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AEMaven%E8%B7%AF%E5%BE%84%E7%9A%84%E9%97%AE%E9%A2%98/4.png" class=""></li>
</ul>
]]></content>
      <categories>
        <category>开发工具配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>通过bat命令将java web项目打成war包</title>
    <url>/2018/09/03/%E9%80%9A%E8%BF%87bat%E5%91%BD%E4%BB%A4%E5%B0%86java-web%E9%A1%B9%E7%9B%AE%E6%89%93%E6%88%90war%E5%8C%85/</url>
    <content><![CDATA[<font size=4>
格式：jar cvf 项目名称.war */

<p>在项目目录下建一个txt，写上上边的代码后缀改成.bat运行即可<br></font></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>项目部署</tag>
      </tags>
  </entry>
  <entry>
    <title>解决easyui combo只有点击箭头才能出现下拉框的问题</title>
    <url>/2019/01/17/%E8%A7%A3%E5%86%B3easyui-combo%E5%8F%AA%E6%9C%89%E7%82%B9%E5%87%BB%E7%AE%AD%E5%A4%B4%E6%89%8D%E8%83%BD%E5%87%BA%E7%8E%B0%E4%B8%8B%E6%8B%89%E6%A1%86%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<font size=4>
在页面初始化函数中加入如下代码
</font>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.combo&quot;).click(function()&#123;</span><br><span class="line">  if ($(this).prev().combobox(&quot;panel&quot;).is(&quot;:visible&quot;)) &#123;</span><br><span class="line">      $(this).prev().combobox(&quot;hidePanel&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">     $(this).prev().combobox(&quot;showPanel&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>通过hexo在多台电脑同步github pages博客</title>
    <url>/2023/01/10/%E9%80%9A%E8%BF%87hexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5github-pages%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<ul>
<li><h2 id="确保自己已经使用hexo在github搭建好了自己的个人博客。"><a href="#确保自己已经使用hexo在github搭建好了自己的个人博客。" class="headerlink" title="确保自己已经使用hexo在github搭建好了自己的个人博客。"></a>确保自己已经使用hexo在github搭建好了自己的个人博客。</h2><ul>
<li><h3 id="对username-github-io仓库新建hexo分支，并克隆"><a href="#对username-github-io仓库新建hexo分支，并克隆" class="headerlink" title="对username.github.io仓库新建hexo分支，并克隆"></a>对username.github.io仓库新建hexo分支，并克隆</h3></li>
<li><h3 id="在Github的dong235523-github-io仓库上新建一个hexo分支，并切换到该分支，并在该仓库-gt-Settings-gt-Branches-gt-Default-branch中将默认分支设为hexo，save保存；然后将该仓库克隆到本地，进入该dong235523-github-io文件目录。"><a href="#在Github的dong235523-github-io仓库上新建一个hexo分支，并切换到该分支，并在该仓库-gt-Settings-gt-Branches-gt-Default-branch中将默认分支设为hexo，save保存；然后将该仓库克隆到本地，进入该dong235523-github-io文件目录。" class="headerlink" title="在Github的dong235523.github.io仓库上新建一个hexo分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为hexo，save保存；然后将该仓库克隆到本地，进入该dong235523.github.io文件目录。"></a>在Github的dong235523.github.io仓库上新建一个hexo分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为hexo，save保存；然后将该仓库克隆到本地，进入该dong235523.github.io文件目录。</h3>  <img src="/2023/01/10/%E9%80%9A%E8%BF%87hexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5github-pages%E5%8D%9A%E5%AE%A2/1.jpg" class="">
  <img src="/2023/01/10/%E9%80%9A%E8%BF%87hexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5github-pages%E5%8D%9A%E5%AE%A2/2.jpg" class=""></li>
<li><h3 id="完成上面步骤后，在当前目录使用Git-Bash执行git-branch命令查看当前所在分支，应为新建的分支hexo："><a href="#完成上面步骤后，在当前目录使用Git-Bash执行git-branch命令查看当前所在分支，应为新建的分支hexo：" class="headerlink" title="完成上面步骤后，在当前目录使用Git Bash执行git branch命令查看当前所在分支，应为新建的分支hexo："></a>完成上面步骤后，在当前目录使用Git Bash执行git branch命令查看当前所在分支，应为新建的分支hexo：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">*hexo</span><br></pre></td></tr></table></figure></li>
<li><h3 id="将hexo分支下载下来，会有一个dong235523-github-io文件目录，只保留-git文件夹，其余删除"><a href="#将hexo分支下载下来，会有一个dong235523-github-io文件目录，只保留-git文件夹，其余删除" class="headerlink" title="将hexo分支下载下来，会有一个dong235523.github.io文件目录，只保留.git文件夹，其余删除"></a>将hexo分支下载下来，会有一个dong235523.github.io文件目录，只保留.git文件夹，其余删除</h3></li>
</ul>
</li>
<li><h2 id="将本地博客的部署文件拷贝进dong235523-github-io文件目录"><a href="#将本地博客的部署文件拷贝进dong235523-github-io文件目录" class="headerlink" title="将本地博客的部署文件拷贝进dong235523.github.io文件目录"></a>将本地博客的部署文件拷贝进dong235523.github.io文件目录</h2><ul>
<li><h3 id="先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进dong235523-github-io文件目录中去。"><a href="#先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进dong235523-github-io文件目录中去。" class="headerlink" title="先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进dong235523.github.io文件目录中去。"></a>先将本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进dong235523.github.io文件目录中去。</h3></li>
<li><h3 id="接下来，进入dong235523-github-io文件目录下，将该目录下的全部文件提交到hexo分支，提交之前需注意："><a href="#接下来，进入dong235523-github-io文件目录下，将该目录下的全部文件提交到hexo分支，提交之前需注意：" class="headerlink" title="接下来，进入dong235523.github.io文件目录下，将该目录下的全部文件提交到hexo分支，提交之前需注意："></a>接下来，进入dong235523.github.io文件目录下，将该目录下的全部文件提交到hexo分支，提交之前需注意：</h3><ul>
<li><h4 id="将themes目录以内中的主题的-git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。"><a href="#将themes目录以内中的主题的-git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。" class="headerlink" title="将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。"></a>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。</h4></li>
<li><h4 id="可能有人会问，删除了themes目录中的-git不就不能git-pull更新主题了吗，很简单，需要更新主题时在另一个地方git-clone下来该主题的最新版本，然后将内容拷到当前主题目录即可"><a href="#可能有人会问，删除了themes目录中的-git不就不能git-pull更新主题了吗，很简单，需要更新主题时在另一个地方git-clone下来该主题的最新版本，然后将内容拷到当前主题目录即可" class="headerlink" title="可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目录即可"></a>可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目录即可</h4></li>
</ul>
</li>
</ul>
</li>
<li><h2 id="提交hexo分支"><a href="#提交hexo分支" class="headerlink" title="提交hexo分支"></a>提交hexo分支</h2><ul>
<li><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;back up hexo files&#x27;（引号内容可改）</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li>
<li><h3 id="即可将博客的hexo部署环境提交到GitHub个人仓库的hexo分支。"><a href="#即可将博客的hexo部署环境提交到GitHub个人仓库的hexo分支。" class="headerlink" title="即可将博客的hexo部署环境提交到GitHub个人仓库的hexo分支。"></a>即可将博客的hexo部署环境提交到GitHub个人仓库的hexo分支。</h3></li>
<li><h3 id="现在可以在GitHub上的dong235523-github-io仓库看到两个分支的差异了。"><a href="#现在可以在GitHub上的dong235523-github-io仓库看到两个分支的差异了。" class="headerlink" title="现在可以在GitHub上的dong235523.github.io仓库看到两个分支的差异了。"></a>现在可以在GitHub上的dong235523.github.io仓库看到两个分支的差异了。</h3></li>
<li><h3 id="在文件-config-yml中可以看到，静态资源上传的分支是固定配置的，并不随着主分支的变化而变化"><a href="#在文件-config-yml中可以看到，静态资源上传的分支是固定配置的，并不随着主分支的变化而变化" class="headerlink" title="在文件_config.yml中可以看到，静态资源上传的分支是固定配置的，并不随着主分支的变化而变化"></a>在文件_config.yml中可以看到，静态资源上传的分支是固定配置的，并不随着主分支的变化而变化</h3>  <img src="/2023/01/10/%E9%80%9A%E8%BF%87hexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5github-pages%E5%8D%9A%E5%AE%A2/3.jpg" class=""></li>
<li><h3 id="main分支和hexo分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；hexo分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。"><a href="#main分支和hexo分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；hexo分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。" class="headerlink" title="main分支和hexo分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；hexo分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。"></a>main分支和hexo分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；hexo分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突。</h3></li>
</ul>
</li>
<li><h2 id="在新电脑下载资源"><a href="#在新电脑下载资源" class="headerlink" title="在新电脑下载资源"></a>在新电脑下载资源</h2><ul>
<li><h3 id="将新电脑的生成的ssh-key添加到GitHub账户上"><a href="#将新电脑的生成的ssh-key添加到GitHub账户上" class="headerlink" title="将新电脑的生成的ssh key添加到GitHub账户上"></a>将新电脑的生成的ssh key添加到GitHub账户上</h3></li>
<li><h3 id="在新电脑上克隆dong235523-github-io仓库的hexo分支到本地，此时本地git仓库处于hexo分支"><a href="#在新电脑上克隆dong235523-github-io仓库的hexo分支到本地，此时本地git仓库处于hexo分支" class="headerlink" title="在新电脑上克隆dong235523.github.io仓库的hexo分支到本地，此时本地git仓库处于hexo分支"></a>在新电脑上克隆dong235523.github.io仓库的hexo分支到本地，此时本地git仓库处于hexo分支</h3></li>
<li><h3 id="切换到dong235523-github-io目录，执行npm-install-由于仓库有一个-gitignore文件，里面默认是忽略掉-node-modules文件夹的，也就是说仓库的hexo分支并没有存储该目录-也不需要-，所以需要install下"><a href="#切换到dong235523-github-io目录，执行npm-install-由于仓库有一个-gitignore文件，里面默认是忽略掉-node-modules文件夹的，也就是说仓库的hexo分支并没有存储该目录-也不需要-，所以需要install下" class="headerlink" title="切换到dong235523.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)"></a>切换到dong235523.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)</h3>  <img src="/2023/01/10/%E9%80%9A%E8%BF%87hexo%E5%9C%A8%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5github-pages%E5%8D%9A%E5%AE%A2/4.jpg" class=""></li>
</ul>
</li>
<li><h2 id="可以在新电脑写博客了"><a href="#可以在新电脑写博客了" class="headerlink" title="可以在新电脑写博客了"></a>可以在新电脑写博客了</h2><ul>
<li><h3 id="编辑完博客之后，依次执行以下指令"><a href="#编辑完博客之后，依次执行以下指令" class="headerlink" title="编辑完博客之后，依次执行以下指令"></a>编辑完博客之后，依次执行以下指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;back up hexo files&#x27;（引号内容可改）</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li>
<li><h3 id="保证hexo分支版本最新"><a href="#保证hexo分支版本最新" class="headerlink" title="保证hexo分支版本最新"></a>保证hexo分支版本最新</h3></li>
<li><h3 id="执行指令"><a href="#执行指令" class="headerlink" title="执行指令"></a>执行指令</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
<li><h3 id="（在此之前，有时可能需要执行hexo-clean），完成后就会发现，最新改动已经更新到main分支，两个分支互不干扰！"><a href="#（在此之前，有时可能需要执行hexo-clean），完成后就会发现，最新改动已经更新到main分支，两个分支互不干扰！" class="headerlink" title="（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到main分支，两个分支互不干扰！"></a>（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到main分支，两个分支互不干扰！</h3></li>
<li><h3 id="注意：-每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先-git-pull"><a href="#注意：-每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先-git-pull" class="headerlink" title="注意： 每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先 git pull**"></a>注意： 每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先 git pull**</h3></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>idea2021.3.1版破解教程</title>
    <url>/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<ul>
<li><h2 id="首先将电脑上的旧版本-IDEA-卸载干净，如果你的电脑是一台新电脑、没有安装过-IDEA-，那么你就可以跳过这一步。一定要按照下图所示勾选，确保完全卸载干净。"><a href="#首先将电脑上的旧版本-IDEA-卸载干净，如果你的电脑是一台新电脑、没有安装过-IDEA-，那么你就可以跳过这一步。一定要按照下图所示勾选，确保完全卸载干净。" class="headerlink" title="首先将电脑上的旧版本 IDEA 卸载干净，如果你的电脑是一台新电脑、没有安装过 IDEA ，那么你就可以跳过这一步。一定要按照下图所示勾选，确保完全卸载干净。"></a>首先将电脑上的旧版本 IDEA 卸载干净，如果你的电脑是一台新电脑、没有安装过 IDEA ，那么你就可以跳过这一步。一定要按照下图所示勾选，确保完全卸载干净。</h2><img src="/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/1.png" class="">
</li>
<li><h2 id="然后安装我们的idea2021-3-1版本，一路next就可以"><a href="#然后安装我们的idea2021-3-1版本，一路next就可以" class="headerlink" title="然后安装我们的idea2021.3.1版本，一路next就可以"></a>然后安装我们的idea2021.3.1版本，一路next就可以</h2></li>
<li><h2 id="下载ja-netfilter-all-rar补丁"><a href="#下载ja-netfilter-all-rar补丁" class="headerlink" title="下载ja-netfilter-all.rar补丁"></a>下载ja-netfilter-all.rar补丁</h2><p><a href="ja-netfilter-all.rar">点击下载</a></p>
</li>
<li><h2 id="将ja-netfilter-all-rar补丁解压缩到D盘（我是放在-D-盘下面），所以激活补丁路径为："><a href="#将ja-netfilter-all-rar补丁解压缩到D盘（我是放在-D-盘下面），所以激活补丁路径为：" class="headerlink" title="将ja-netfilter-all.rar补丁解压缩到D盘（我是放在 D 盘下面），所以激活补丁路径为："></a>将ja-netfilter-all.rar补丁解压缩到D盘（我是放在 D 盘下面），所以激活补丁路径为：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-javaagent:d:/ja-netfilter-all/ja-netfilter.jar</span><br></pre></td></tr></table></figure>
<img src="/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/2.png" class="">
<p>注意，要ja-netfilter-all整个文件夹，光一个jar包是没用的</p>
</li>
<li><h2 id="在软件的快捷键上-右键-——》点击属性"><a href="#在软件的快捷键上-右键-——》点击属性" class="headerlink" title="在软件的快捷键上  右键 ——》点击属性"></a>在软件的快捷键上  右键 ——》点击属性</h2><img src="/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/3.png" class="">
</li>
<li><h2 id="点击打开文件所在的位置"><a href="#点击打开文件所在的位置" class="headerlink" title="点击打开文件所在的位置"></a>点击打开文件所在的位置</h2><img src="/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/4.png" class="">
</li>
<li><h2 id="找到-idea64-exe-vmoptions-文件并且打开。"><a href="#找到-idea64-exe-vmoptions-文件并且打开。" class="headerlink" title="找到 idea64.exe.vmoptions 文件并且打开。"></a>找到 idea64.exe.vmoptions 文件并且打开。</h2><img src="/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/5.png" class="">
</li>
<li><h2 id="将激活补丁的路径【-javaagent-d-x2F-ja-netfilter-all-x2F-ja-netfilter-jar】粘贴进去并且保存。"><a href="#将激活补丁的路径【-javaagent-d-x2F-ja-netfilter-all-x2F-ja-netfilter-jar】粘贴进去并且保存。" class="headerlink" title="将激活补丁的路径【-javaagent:d:&#x2F;ja-netfilter-all&#x2F;ja-netfilter.jar】粘贴进去并且保存。"></a>将激活补丁的路径【-javaagent:d:&#x2F;ja-netfilter-all&#x2F;ja-netfilter.jar】粘贴进去并且保存。</h2><img src="/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/6.png" class="">
</li>
<li><h2 id="现在我们打开-IDEA-软件，如下图所示点击-OK。"><a href="#现在我们打开-IDEA-软件，如下图所示点击-OK。" class="headerlink" title="现在我们打开 IDEA 软件，如下图所示点击 OK。"></a>现在我们打开 IDEA 软件，如下图所示点击 OK。</h2><img src="/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/7.png" class="">
</li>
<li><h2 id="复制补丁文件里面的激活码"><a href="#复制补丁文件里面的激活码" class="headerlink" title="复制补丁文件里面的激活码"></a>复制补丁文件里面的激活码</h2><img src="/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/8.png" class="">
</li>
<li><h2 id="回到-IDEA-，点击-Activation-code，将激活码粘贴进去，然后点击-Activate-激活。"><a href="#回到-IDEA-，点击-Activation-code，将激活码粘贴进去，然后点击-Activate-激活。" class="headerlink" title="回到 IDEA ，点击 Activation code，将激活码粘贴进去，然后点击 Activate 激活。"></a>回到 IDEA ，点击 Activation code，将激活码粘贴进去，然后点击 Activate 激活。</h2><img src="/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/9.png" class="">
</li>
<li><h2 id="如下如所示，就说明你已经激活成功了。"><a href="#如下如所示，就说明你已经激活成功了。" class="headerlink" title="如下如所示，就说明你已经激活成功了。"></a>如下如所示，就说明你已经激活成功了。</h2><img src="/2024/03/05/idea2021.3.1%E7%89%88%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/10.png" class=""></li>
</ul>
<p>切记，后续不要升级 IDEA，否则激活可能会失效！！！。</p>
<p>如果按上面操作完成后仍然激活不了：<br>检查激活补丁的路径 有没有写对。<br>检查是否解压  ja-netfilter-all.rar 文件。（仔细对照教程图片）</p>
]]></content>
      <categories>
        <category>开发工具配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>typora1.6.7破解教程</title>
    <url>/2024/03/06/typora1.6.7%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<ul>
<li><h3 id="1-先打开官网下载typora，typora官网地址：https-typoraio-cn"><a href="#1-先打开官网下载typora，typora官网地址：https-typoraio-cn" class="headerlink" title="1.先打开官网下载typora，typora官网地址：https://typoraio.cn"></a>1.先打开官网下载typora，typora官网地址：<a href="https://typoraio.cn/">https://typoraio.cn</a></h3><img src="/2024/03/06/typora1.6.7%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/1.jpg" class="">
<p>找到历史版本，下载1.6.7版本</p>
<img src="/2024/03/06/typora1.6.7%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/2.jpg" class="">
</li>
<li><h3 id="2-双击打开typora安装包，选择install-for-all-users（recommended）"><a href="#2-双击打开typora安装包，选择install-for-all-users（recommended）" class="headerlink" title="2.双击打开typora安装包，选择install for all users（recommended）"></a>2.双击打开typora安装包，选择install for all users（recommended）</h3><img src="/2024/03/06/typora1.6.7%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/3.jpg" class="">
</li>
<li><h3 id="3-我这里选择的是E盘-记得此目录"><a href="#3-我这里选择的是E盘-记得此目录" class="headerlink" title="3.我这里选择的是E盘,记得此目录"></a>3.我这里选择的是E盘,记得此目录</h3><img src="/2024/03/06/typora1.6.7%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/4.jpg" class="">
</li>
<li><h3 id="4-勾选，然后next，然后记得退出typora，typora打开是无法激活成功的"><a href="#4-勾选，然后next，然后记得退出typora，typora打开是无法激活成功的" class="headerlink" title="4.勾选，然后next，然后记得退出typora，typora打开是无法激活成功的"></a>4.勾选，然后next，然后记得退出typora，typora打开是无法激活成功的</h3><img src="/2024/03/06/typora1.6.7%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/5.jpg" class="">
</li>
<li><h3 id="5-下载激活文件"><a href="#5-下载激活文件" class="headerlink" title="5.下载激活文件"></a>5.下载激活文件</h3><p><a href="winmm.dll" title="激活文件">点击下载</a></p>
</li>
<li><h3 id="6-将下载好的文件，拖动到刚刚装好的typora目录下"><a href="#6-将下载好的文件，拖动到刚刚装好的typora目录下" class="headerlink" title="6.将下载好的文件，拖动到刚刚装好的typora目录下"></a>6.将下载好的文件，拖动到刚刚装好的typora目录下</h3><img src="/2024/03/06/typora1.6.7%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/8.jpg" class="">
</li>
<li><h3 id="7-打开typora，点击帮助》》》我的许可证"><a href="#7-打开typora，点击帮助》》》我的许可证" class="headerlink" title="7.打开typora，点击帮助》》》我的许可证"></a>7.打开typora，点击帮助》》》我的许可证</h3><img src="/2024/03/06/typora1.6.7%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/6.jpg" class="">
</li>
<li><h3 id="8-显示已激活成功"><a href="#8-显示已激活成功" class="headerlink" title="8.显示已激活成功"></a>8.显示已激活成功</h3><img src="/2024/03/06/typora1.6.7%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/7.jpg" class=""></li>
</ul>
]]></content>
      <categories>
        <category>开发工具配置</category>
      </categories>
  </entry>
  <entry>
    <title>oracle客户端client10g安装及配置</title>
    <url>/2024/03/08/oracle%E5%AE%A2%E6%88%B7%E7%AB%AFclient10g%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>client10g是oracle的客户端，记录一下安装方法及需要的一些配置</p>
<p>打开安装程序</p>
<img src="/2024/03/08/oracle%E5%AE%A2%E6%88%B7%E7%AB%AFclient10g%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/1.jpg" class="">

<p>然后下一步</p>
<img src="/2024/03/08/oracle%E5%AE%A2%E6%88%B7%E7%AB%AFclient10g%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/2.jpg" class="">

<p>接下来注意，必须要选择管理员</p>
<img src="/2024/03/08/oracle%E5%AE%A2%E6%88%B7%E7%AB%AFclient10g%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/3.jpg" class="">

<p>然后一直下一步就可以了</p>
<img src="/2024/03/08/oracle%E5%AE%A2%E6%88%B7%E7%AB%AFclient10g%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/4.jpg" class="">

<p>最后一步可以勾选常规配置</p>
<p>接下来安装plsql<br>正常安装即可</p>
<p>安装完plsql后，将tnsnames.ora文件复制到D:\DevelopmentTool\oracle_client\NETWORK\ADMIN文件夹下<br><a href="tnsnames.ora">点击下载</a><br>注：tnsnames.ora配置的是oracle连接的数据源，示例文件中有单数据源和双数据源两种配置</p>
<p>在我本机装完plsql后，直接打开会出现空白界面，必须右键以管理员身份打开才行</p>
<p>接下来连接数据库时候出现了 提示ORA-12638:身份证明检索失败<br>这是由于Oracle的认证方式使用了本地操作系统认证（NTS）导致的。只需通过配置文件修改为口令文件认证（NONE）或者直接通过Oracle自带的Net Manager修改<br>通过配置文件修改为口令文件认证（NONE）即可</p>
<p>在D:\DevelopmentTool\oracle_client\NETWORK\ADMIN文件夹中找到sqlnet.ora文件<br>将SQLNET.AUTHENTICATION_SERVICES&#x3D; (NTS)中NTS修改为NONE。如果没有这句，手动添加一下即可。</p>
<img src="/2024/03/08/oracle%E5%AE%A2%E6%88%B7%E7%AB%AFclient10g%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/5.jpg" class="">
<p>修改完成后，需要重启PLSQL生效。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>linux批量启停jar包命令</title>
    <url>/2024/05/06/linux%E6%89%B9%E9%87%8F%E5%90%AF%E5%81%9Cjar%E5%8C%85%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="批量后台启动jar包命令"><a href="#批量后台启动jar包命令" class="headerlink" title="批量后台启动jar包命令"></a>批量后台启动jar包命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定义日志目录</span><br><span class="line">LOG_DIR=&quot;logs&quot;</span><br><span class="line">mkdir -p &quot;$LOG_DIR&quot;</span><br><span class="line"></span><br><span class="line"># 定义要执行的 JAR 包列表和延迟时间</span><br><span class="line">JAR_FILES=(</span><br><span class="line">    &quot;xxx1.jar&quot;</span><br><span class="line">    &quot;xxx2.jar&quot;</span><br><span class="line">    &quot;xxx3.jar&quot;</span><br><span class="line">    &quot;xxx4.jar&quot;</span><br><span class="line">    &quot;xxx5.jar&quot;</span><br><span class="line">)</span><br><span class="line">DELAY=100</span><br><span class="line"># 循环遍历执行每个 JAR 包</span><br><span class="line">for JAR_FILE in &quot;$&#123;JAR_FILES[@]&#125;&quot;; do</span><br><span class="line">    LOG_FILE=&quot;$LOG_DIR/$&#123;JAR_FILE%.jar&#125;.log&quot; # 构建日志文件名，例如 hkcloud-nacos.log</span><br><span class="line"></span><br><span class="line">    echo &quot;延迟 $DELAY 秒后开始执行 $JAR_FILE ...&quot;</span><br><span class="line">    sleep $DELAY</span><br><span class="line"></span><br><span class="line">    echo &quot;开始执行 $JAR_FILE ...&quot;</span><br><span class="line">    nohup java -jar &quot;$JAR_FILE&quot; &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1 &amp;</span><br><span class="line">    echo &quot;执行 $JAR_FILE 完成。日志文件位于 $LOG_FILE。&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;所有 JAR 包已在后台执行。&quot;</span><br></pre></td></tr></table></figure>
<p>将上述代码放到一个新建的txt文件中，然后尾缀改成.sh文件即可</p>
<h3 id="批量停止jar包命令"><a href="#批量停止jar包命令" class="headerlink" title="批量停止jar包命令"></a>批量停止jar包命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 定义要关闭的 JAR 包列表</span><br><span class="line">JAR_FILES=(</span><br><span class="line">    &quot;xxx1.jar&quot;</span><br><span class="line">    &quot;xxx2.jar&quot;</span><br><span class="line">    &quot;xxx3.jar&quot;</span><br><span class="line">    &quot;xxx4.jar&quot;</span><br><span class="line">    &quot;xxx5.jar&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 遍历每个 JAR 文件，尝试关闭相关联的进程</span><br><span class="line">for JAR_FILE in &quot;$&#123;JAR_FILES[@]&#125;&quot;; do</span><br><span class="line">    echo &quot;尝试关闭 $JAR_FILE ...&quot;</span><br><span class="line">    PIDS=$(ps aux | grep &quot;$JAR_FILE&quot; | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">    if [ -n &quot;$PIDS&quot; ]; then</span><br><span class="line">        kill -9 $PIDS</span><br><span class="line">        echo &quot;$JAR_FILE 进程已关闭。&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;$JAR_FILE 进程未找到。&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;所有 JAR 包已关闭。&quot;</span><br></pre></td></tr></table></figure>
<p>将上述代码放到一个新建的txt文件中，然后尾缀改成.sh文件即可</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql快捷生成数据库结构设计</title>
    <url>/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>公司项目需要写数据库设计文档，就是数据库字段信息写到word中，挨个字段的粘贴效率太低了<br>所以需要进行一些快捷操作<br>下边以mysql数据库，Navicat软件举例</p>
<ul>
<li><h3 id="在Navicat中整理表信息"><a href="#在Navicat中整理表信息" class="headerlink" title="在Navicat中整理表信息"></a>在Navicat中整理表信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @rank:=@rank + 1 AS 序号,</span><br><span class="line">	b.COLUMN_KEY 主键,</span><br><span class="line">    b.COLUMN_NAME 名称,</span><br><span class="line">	b.column_type 字段类型,</span><br><span class="line">	case IS_NULLABLE when &#x27;NO&#x27; then &#x27;&#x27;</span><br><span class="line">	else &#x27;√&#x27; end  是否可空,</span><br><span class="line">	b.COLUMN_DEFAULT 默认值,</span><br><span class="line">	b.column_comment 字段说明,</span><br><span class="line">	&#x27;&#x27; 备注</span><br><span class="line">from information_schema.COLUMNS b</span><br><span class="line">, (SELECT @rank:= 0) c</span><br><span class="line">where b.TABLE_SCHEMA = &#x27;hk_iot&#x27;</span><br><span class="line">and b.TABLE_NAME = &#x27;thing_model_argument_data&#x27;</span><br></pre></td></tr></table></figure>
<p>查询结果：</p>
<img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/1.png" class="">
<p>注：TABLE_SCHEMA（数据库名）  TABLE_NAME（表名）</p>
</li>
<li><h3 id="将查询结果导出成excel"><a href="#将查询结果导出成excel" class="headerlink" title="将查询结果导出成excel"></a>将查询结果导出成excel</h3><img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/2.jpg" class="">
<img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/3.jpg" class=""></li>
</ul>
<p>复制excel内容到目标word中</p>
<img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/4.jpg" class="">

<ul>
<li><h3 id="格式化表格"><a href="#格式化表格" class="headerlink" title="格式化表格"></a>格式化表格</h3>粘过去之后是这样无样式的表格<img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/5.png" class="">
选择边框和底纹<img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/6.jpg" class="">
<img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/7.jpg" class="">
这样效果就差不多了<img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/8.jpg" class="">
然后从示例的表格中用格式刷刷点样式下来<img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/9.jpg" class=""></li>
</ul>
<p>最后在第一格上方插入一行，把表头复制进来</p>
<img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/10.jpg" class="">
<p>这样一个表就完事了</p>
<img src="/2024/05/18/mysql%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/11.jpg" class="">

<p>虽然这个流程也挺繁琐的，但是总比挨个字段复制要快，等以后有更快的方法在更新。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装redis</title>
    <url>/2024/05/18/docker%E5%AE%89%E8%A3%85redis/</url>
    <content><![CDATA[<p>官方推荐安装方式：<br>1、执行命令，下载 redis 镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull redis:4.0.1 </span><br></pre></td></tr></table></figure>
<p>如下所示：</p>
<img src="/2024/05/18/docker%E5%AE%89%E8%A3%85redis/1.jpg" class="">
<p>2、执行命令，创建并启动 redis 容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -d --name redis6379 -p 6379:6379 redis:4.0.1 --requirepass &quot;123456&quot;</span><br></pre></td></tr></table></figure>

<p>测试一下，已经安装成功！</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
